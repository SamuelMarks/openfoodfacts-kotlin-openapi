/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import dev.upvote.api.models.Element
import dev.upvote.api.models.TitleElement

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

/**
 * Each panel contains an optional title and an optional array of elements.
 *
 * @param type Type of the panel. If set to \"card\", the panel and its sub-panels should be displayed in a card. If set to \"inline\", the panel should have its content always displayed.
 * @param expanded If true, the panel is to be displayed already expanded. If false, only the title should be displayed, and the user should be able to click or tap it to open the panel and display the elements.
 * @param expandFor If set to \"large\", the content of the panel should be expanded on large screens, but it should still be possible to unexpand it.
 * @param evaluation A simple assessment of the panel value, typically used to format fonts, et.c e.g. bad = red
 * @param titleElement 
 * @param elements An ordered list of elements to display in the content of the panel.
 * @param level a message level, as levels we use in log. It might help theming the panel visualy 
 * @param propertySize size is either empty (normal display)  or small to indicate a panel that should have a smaller font size 
 * @param topics 
 */

@Serializable
data class Panel (

    /* Type of the panel. If set to \"card\", the panel and its sub-panels should be displayed in a card. If set to \"inline\", the panel should have its content always displayed. */
    @SerialName("type")
    val type: kotlin.String? = null,

    /* If true, the panel is to be displayed already expanded. If false, only the title should be displayed, and the user should be able to click or tap it to open the panel and display the elements. */
    @SerialName("expanded")
    val expanded: kotlin.Boolean? = null,

    /* If set to \"large\", the content of the panel should be expanded on large screens, but it should still be possible to unexpand it. */
    @SerialName("expand_for")
    val expandFor: kotlin.String? = null,

    /* A simple assessment of the panel value, typically used to format fonts, et.c e.g. bad = red */
    @SerialName("evaluation")
    val evaluation: Panel.Evaluation? = null,

    @SerialName("title_element")
    val titleElement: TitleElement? = null,

    /* An ordered list of elements to display in the content of the panel. */
    @SerialName("elements")
    val elements: kotlin.collections.List<Element>? = null,

    /* a message level, as levels we use in log. It might help theming the panel visualy  */
    @SerialName("level")
    val level: kotlin.String? = null,

    /* size is either empty (normal display)  or small to indicate a panel that should have a smaller font size  */
    @SerialName("size")
    val propertySize: Panel.PropertySize? = null,

    @SerialName("topics")
    val topics: kotlin.collections.List<kotlin.String>? = null

) {

    /**
     * A simple assessment of the panel value, typically used to format fonts, et.c e.g. bad = red
     *
     * Values: good,average,neutral,bad,unknown
     */
    // @JsonClass(generateAdapter = false)
    enum class Evaluation(val value: kotlin.String) {
        @SerialName("good") good("good"),
        @SerialName("average") average("average"),
        @SerialName("neutral") neutral("neutral"),
        @SerialName("bad") bad("bad"),
        @SerialName("unknown") unknown("unknown");
    }
    /**
     * size is either empty (normal display)  or small to indicate a panel that should have a smaller font size 
     *
     * Values: small
     */
    // @JsonClass(generateAdapter = false)
    enum class PropertySize(val value: kotlin.String) {
        @SerialName("small") small("small");
    }

}

