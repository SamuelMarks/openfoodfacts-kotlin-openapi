/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfAttributeGroupsInner
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfCategoriesProperties
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfEcoscoreData
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfImages
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfIngredientsAnalysis
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfIngredientsInner
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfNovaGroupsMarkers
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfNutrientLevels
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfNutriments
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfNutriscoreData
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfSelectedImages
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfSourcesFields
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfSourcesInner
import org.openapitools.client.models.PackagingComponentREAD
import org.openapitools.client.models.Panels
import org.openapitools.client.models.ResponseStatusResult
import org.openapitools.client.models.WarningOrErrorMessage
import kotlinx.serialization.descriptors.StructureKind
import kotlinx.serialization.json.JsonElement
import kotlinx.serialization.json.JsonObject

/**
 * 
 *
 * @param statusId Overall status of the request: whether it failed or succeeded, with or without warnings or errors.
 * @param result 
 * @param warnings List of warnings. Warnings are used to alert about something that may be wrong, but is not necessarily wrong (e.g. a nutrient value that is unexpectedly high).
 * @param errors List of errors. Errors are used to alert about something that is definitely wrong (e.g. a nutrient value thaty is impossibly high).
 * @param abbreviatedProductName Abbreviated name in requested language
 * @param code barcode of the product (can be EAN-13 or internal codes for some food stores), for products without a barcode, Open Food Facts assigns a number starting with the 200 reserved prefix 
 * @param codesTags 
 * @param genericName Legal name of the product as regulated by the European authorities. 
 * @param id internal identifier for the product, usually set to the value of `code`, except on the producers platform where it is prefixed by the owner 
 * @param lc Main language of the product. This is a duplicate of `lang` property (for historical reasons). 
 * @param lang Main language of the product.  This should be the main language of product packaging (if one is predominant).  Main language is also used to decide which ingredients list to parse. 
 * @param novaGroup Nova group as an integer from 1 to 4. See https://world.openfoodfacts.org/nova 
 * @param novaGroups 
 * @param obsolete 
 * @param obsoleteSinceDate A date at which the product was declared obsolete. This means it's not produced any more. 
 * @param productName The name of the product 
 * @param productNameEn The name of the product can also be in many other languages like product_name_fr (for French). 
 * @param productQuantity The size in g or ml for the whole product. It's a normalized version of the quantity field. 
 * @param productQuantityUnit The unit (either g or ml) for the correponding product_quantity. 
 * @param quantity Quantity and Unit. 
 * @param additivesN Number of food additives. 
 * @param checked 
 * @param complete 
 * @param completeness 
 * @param ecoscoreGrade See also: `ecoscore_tags` 
 * @param ecoscoreScore See also: `ecoscore_tags` 
 * @param foodGroups 
 * @param foodGroupsTags 
 * @param nutrientLevels 
 * @param packagingText Recycling instructions as raw text, e.g. Plastic bottle to recycle, Plastic cap to recycle. This will get automatically parsed and will be used to compute the Eco-Score. You can either request it (if it exists) or send it in a specific language. 
 * @param packagings The packagings object is an array of individual packaging component objects.  The Packaging data document explains how packaging data is structured in Open Food Facts: https://openfoodfacts.github.io/openfoodfacts-server/dev/explain-packaging-data/  The shape, material and recycling properties of each packaging component are linked to entries in the packaging_shapes, packaging_materials and packaging_recycling taxonomies:  https://world.openfoodfacts.org/data/taxonomies/packaging_shapes.json https://world.openfoodfacts.org/data/taxonomies/packaging_materials.json https://world.openfoodfacts.org/data/taxonomies/packaging_recycling.json  If the tags_lc field is set, the properties will include a lc_name field with the translation in the requested language.
 * @param packagingsComplete Indicate if the packagings array contains all the packaging parts of the product. This field can be set by users when they enter or verify packaging data. Possible values are 0 or 1.
 * @param pnnsGroups1 Category of food according to [French Nutrition and Health Program](https://fr.wikipedia.org/wiki/Programme_national_nutrition_sant%C3%A9) 
 * @param pnnsGroups1Tags 
 * @param pnnsGroups2 Sub Category of food according to [French Nutrition and Health Program](https://fr.wikipedia.org/wiki/Programme_national_nutrition_sant%C3%A9) 
 * @param pnnsGroups2Tags 
 * @param popularityKey An imprecise measurement of popularity based on Scan statistics. A higher value means higher popularity. 
 * @param popularityTags Indicators for the popularity of a product, like the amount of scans in a specific year. 
 * @param scansN 
 * @param uniqueScansN 
 * @param servingQuantity Normalized version of serving_size. Note that this is NOT the number of servings by product. <small>(in perl, see `normalize_serving_size`)</small> 
 * @param servingQuantityUnit The unit (either g or ml) for the correponding serving_quantity. 
 * @param servingSize Serving size text (generally in g or ml). We expect a quantity + unit but the user is free to input any string. 
 * @param brands List of brands (not taxonomized)
 * @param brandsTags 
 * @param categories 
 * @param categoriesHierarchy 
 * @param categoriesLc Categories language code
 * @param categoriesTags 
 * @param checkersTags 
 * @param cities 
 * @param citiesTags 
 * @param correctorsTags 
 * @param countries List of countries where the product is sold. 
 * @param countriesHierarchy 
 * @param countriesLc Countries language code
 * @param countriesTags 
 * @param ecoscoreTags All ecoscore of a product. Most of the time it's only one value, but it might eventually be more for products composed of sub-products. See also: `ecoscore_score`, `ecoscore_grade`. 
 * @param embCodes Packager code. EMB is the French system of traceability codes for packager. 
 * @param embCodesOrig 
 * @param embCodesTags 
 * @param labels 
 * @param labelsHierarchy 
 * @param labelsLc 
 * @param labelsTags 
 * @param entryDatesTags The data as a series of tag: `yyyy-mm-dd`, `yyyy-mm`, `yyyy` 
 * @param manufacturingPlaces Places where the product was manufactured or transformed. 
 * @param manufacturingPlacesTags 
 * @param novaGroupsTags 
 * @param nutrientLevelsTags 
 * @param imageFrontSmallUrl 
 * @param imageFrontThumbUrl 
 * @param imageFrontUrl 
 * @param imageNutritionSmallUrl 
 * @param imageNutritionThumbUrl 
 * @param imageNutritionUrl 
 * @param imageSmallUrl 
 * @param imageThumbUrl 
 * @param imageUrl 
 * @param images 
 * @param lastImageDatesTags 
 * @param lastImageT 
 * @param selectedImages 
 * @param ecoscoreData 
 * @param ecoscoreExtendedDataVersion 
 * @param environmentImpactLevel 
 * @param environmentImpactLevelTags 
 * @param additivesTags 
 * @param allergens comma separated list of allergens
 * @param allergensLc language in which `allergens` where input
 * @param allergensHierarchy 
 * @param allergensTags 
 * @param ingredients This structure gives the different ingredients and some information about them, like estimate on their quantity. 
 * @param ingredientsAnalysis 
 * @param ingredientsAnalysisTags 
 * @param ingredientsFromOrThatMayBeFromPalmOilN 
 * @param ingredientsFromPalmOilN 
 * @param ingredientsFromPalmOilTags 
 * @param ingredientsHierarchy 
 * @param ingredientsN 
 * @param ingredientsNTags 
 * @param ingredientsOriginalTags 
 * @param ingredientsPercentAnalysis 
 * @param ingredientsSweetenersN Number of sweeteners additives in the ingredients. Undefined if ingredients are not specified. 
 * @param ingredientsNonNutritiveSweetenersN Number of non-nutritive sweeteners additives (as specified in the Nutri-Score formula) in the ingredients. Undefined if ingredients are not specified. 
 * @param ingredientsTags 
 * @param ingredientsLc Language that was used to parse the ingredient list. If `ingredients_text` is available for the product main language (`lang`), `ingredients_lc=lang`, otherwise we look at `ingredients_text` fields for other languages and set `ingredients_lc` to the first non-empty `ingredient_text`.  
 * @param ingredientsText Raw list of ingredients. This will get automatically parsed and get used to compute the Eco-Score or find allergens, etc..  It's a copy of ingredients_text in the main language of the product (see `lang` proprety). 
 * @param ingredientsTextWithAllergens Same text as `ingredients_text` but where allergens have HTML elements around them to identify them 
 * @param ingredientsThatMayBeFromPalmOilN 
 * @param ingredientsThatMayBeFromPalmOilTags 
 * @param ingredientsWithSpecifiedPercentN 
 * @param ingredientsWithSpecifiedPercentSum 
 * @param ingredientsWithUnspecifiedPercentN 
 * @param ingredientsWithUnspecifiedPercentSum 
 * @param knownIngredientsN 
 * @param origins Origins of ingredients 
 * @param originsHierarchy 
 * @param originsLc 
 * @param originsTags 
 * @param traces List of substances that might cause allergies that are present in trace amounts in the product (this does not include the ingredients, as they are not only present in trace amounts). It is taxonomized with the allergens taxonomy. 
 * @param tracesHierarchy 
 * @param tracesLc 
 * @param tracesTags 
 * @param unknownIngredientsN 
 * @param noNutritionData When a product does not have nutrition data displayed on the packaging, the user can check the field \"Nutrition facts are not specified on the product\". By doing so, the no_nutrition_data field takes the value \"on\". This case is frequent (thousands of products). 
 * @param nutritionDataPer The nutrition data on the package can be per serving or per 100g.  This is essential to understand if `<nutrient>_value` and `<nutrient>` values in `nutriments` applies for a serving or for 100g.  **IMPORTANT:** When writing products, this setting applies to all existing nutrients values for the product, not only the nutrient values sent in the write request. So it should not be changed unless all nutrients values are provided with values that match the nutrition_data_per field. 
 * @param nutritionDataPreparedPer The nutrition data for prepared product on the package (if any) can be per serving or per 100g.  This is essential to understand if `<nutrient>_prepared_value` and `<nutrient>_prepared` values in `nutriments` applies for a serving or for 100g.  See also important note on `nutrition_data_per`. 
 * @param nutriments 
 * @param nutriscoreData 
 * @param nutriscoreGrade Nutri-Score for the product as a letter.  See https://world.openfoodfacts.org/nutriscore. 
 * @param nutriscoreScore Nutri-Score for the product as an integer (see also `nutriscore_grade`). 
 * @param nutriscoreScoreOpposite 
 * @param nutritionGradeFr Nutrition grade (‘a’ to ‘e’), https://world.openfoodfacts.org/nutriscore. 
 * @param nutritionGrades Nutrition grades as a comma separated list.  Some products with multiple components might have multiple Nutri-Score 
 * @param nutritionGradesTags 
 * @param nutritionScoreBeverage 
 * @param nutritionScoreWarningFruitsVegetablesNutsEstimateFromIngredients 
 * @param nutritionScoreWarningFruitsVegetablesNutsEstimateFromIngredientsValue 
 * @param nutritionScoreWarningNoFiber 
 * @param otherNutritionalSubstancesTags 
 * @param unknownNutrientsTags 
 * @param vitaminsTags 
 * @param dataQualityBugsTags 
 * @param dataQualityErrorsTags 
 * @param dataQualityInfoTags 
 * @param dataQualityTags 
 * @param dataQualityWarningsTags 
 * @param dataSources Source of data imported from producers. 
 * @param dataSourcesTags 
 * @param lastCheckDatesTags 
 * @param lastCheckedT 
 * @param lastChecker 
 * @param states comma separated list of values indicating some states of the product, like things to be done, or to be completed. See [states taxonomy](https://static.openfoodfacts.net/data/taxonomies/states.json) 
 * @param statesHierarchy 
 * @param statesTags 
 * @param miscTags Information about different aspect of the product 
 * @param additivesOriginalTags 
 * @param additivesPrevOriginalTags 
 * @param addedCountriesTags 
 * @param allergensFromIngredients 
 * @param allergensFromUser 
 * @param aminoAcidsPrevTags 
 * @param aminoAcidsTags 
 * @param carbonFootprintPercentOfKnownIngredients 
 * @param categoriesProperties 
 * @param categoriesPropertiesTags 
 * @param categoryProperties 
 * @param ciqualFoodNameTags 
 * @param comparedToCategory the category to use for comparison.  **TODO** explain how it is chosen. 
 * @param conservationConditions 
 * @param customerService Contact info of customer service. 
 * @param expirationDate 
 * @param link link to the product on the website of the producer 
 * @param mainCountriesTags 
 * @param mineralsPrevTags 
 * @param mineralsTags 
 * @param ownerFields 
 * @param novaGroupsMarkers 
 * @param nucleotidesTags 
 * @param origin 
 * @param purchasePlaces Country, state, or city where the product can be purchased. 
 * @param purchasePlacesTags 
 * @param stores Distributor name. 
 * @param storesTags 
 * @param tracesFromIngredients 
 * @param tracesFromUser 
 * @param createdT Date when the product was added (UNIX timestamp format). See also `entry_dates_tags` 
 * @param creator The contributor who added the product first. 
 * @param editorsTags List of editors who edited the product. 
 * @param informersTags 
 * @param interfaceVersionCreated 
 * @param interfaceVersionModified 
 * @param languages 
 * @param languagesCodes Same as `languages` but by language code, instead of language tags 
 * @param languagesHierarchy 
 * @param languagesTags 
 * @param lastEditDatesTags 
 * @param lastEditor 
 * @param lastModifiedBy The username of the user who last modified the product. 
 * @param lastModifiedT Date when the product page was last modified. 
 * @param owner Id of the producer in case he provides his own data about a product (producer platform). 
 * @param ownersTags Tagyfied version of owner 
 * @param photographersTags 
 * @param rev revision number of this product version (each edit adds a revision)
 * @param sources 
 * @param sourcesFields 
 * @param teams 
 * @param teamsTags 
 * @param updateKey 
 * @param knowledgePanels 
 * @param attributeGroups Each element is an attribute that can help compute a personal ranking for the product
 */

@Serializable
data class GetProductByBarcode200Response (

    /* Overall status of the request: whether it failed or succeeded, with or without warnings or errors. */
    @SerialName("status_id")
    val statusId: GetProductByBarcode200Response.StatusId? = null,

    @SerialName("result")
    val result: ResponseStatusResult? = null,

    /* List of warnings. Warnings are used to alert about something that may be wrong, but is not necessarily wrong (e.g. a nutrient value that is unexpectedly high). */
    @SerialName("warnings")
    val warnings: kotlin.collections.List<WarningOrErrorMessage>? = null,

    /* List of errors. Errors are used to alert about something that is definitely wrong (e.g. a nutrient value thaty is impossibly high). */
    @SerialName("errors")
    val errors: kotlin.collections.List<WarningOrErrorMessage>? = null,

    /* Abbreviated name in requested language */
    @SerialName("abbreviated_product_name")
    val abbreviatedProductName: kotlin.String? = null,

    /* barcode of the product (can be EAN-13 or internal codes for some food stores), for products without a barcode, Open Food Facts assigns a number starting with the 200 reserved prefix  */
    @SerialName("code")
    val code: kotlin.String? = null,

    @SerialName("codes_tags")
    val codesTags: kotlin.collections.List<kotlin.String>? = null,

    /* Legal name of the product as regulated by the European authorities.  */
    @SerialName("generic_name")
    val genericName: kotlin.String? = null,

    /* internal identifier for the product, usually set to the value of `code`, except on the producers platform where it is prefixed by the owner  */
    @SerialName("id")
    val id: kotlin.String? = null,

    /* Main language of the product. This is a duplicate of `lang` property (for historical reasons).  */
    @SerialName("lc")
    val lc: kotlin.String? = null,

    /* Main language of the product.  This should be the main language of product packaging (if one is predominant).  Main language is also used to decide which ingredients list to parse.  */
    @SerialName("lang")
    val lang: kotlin.String? = null,

    /* Nova group as an integer from 1 to 4. See https://world.openfoodfacts.org/nova  */
    @SerialName("nova_group")
    val novaGroup: kotlin.Int? = null,

    @SerialName("nova_groups")
    val novaGroups: kotlin.String? = null,

    @SerialName("obsolete")
    val obsolete: kotlin.String? = null,

    /* A date at which the product was declared obsolete. This means it's not produced any more.  */
    @SerialName("obsolete_since_date")
    val obsoleteSinceDate: kotlin.String? = null,

    /* The name of the product  */
    @SerialName("product_name")
    val productName: kotlin.String? = null,

    /* The name of the product can also be in many other languages like product_name_fr (for French).  */
    @SerialName("product_name_en")
    val productNameEn: kotlin.String? = null,

    /* The size in g or ml for the whole product. It's a normalized version of the quantity field.  */
    @SerialName("product_quantity")
    val productQuantity: kotlin.String? = null,

    /* The unit (either g or ml) for the correponding product_quantity.  */
    @SerialName("product_quantity_unit")
    val productQuantityUnit: kotlin.String? = null,

    /* Quantity and Unit.  */
    @SerialName("quantity")
    val quantity: kotlin.String? = null,

    /* Number of food additives.  */
    @SerialName("additives_n")
    val additivesN: kotlin.Int? = null,

    @SerialName("checked")
    val checked: kotlin.String? = null,

    @SerialName("complete")
    val complete: kotlin.Int? = null,

    @SerialName("completeness")
    val completeness: Double? = null,

    /* See also: `ecoscore_tags`  */
    @SerialName("ecoscore_grade")
    val ecoscoreGrade: kotlin.String? = null,

    /* See also: `ecoscore_tags`  */
    @SerialName("ecoscore_score")
    val ecoscoreScore: kotlin.Int? = null,

    @SerialName("food_groups")
    val foodGroups: kotlin.String? = null,

    @SerialName("food_groups_tags")
    val foodGroupsTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("nutrient_levels")
    val nutrientLevels: GetProductByBarcode200ResponseAllOfAllOfNutrientLevels? = null,

    /* Recycling instructions as raw text, e.g. Plastic bottle to recycle, Plastic cap to recycle. This will get automatically parsed and will be used to compute the Eco-Score. You can either request it (if it exists) or send it in a specific language.  */
    @SerialName("packaging_text")
    val packagingText: kotlin.String? = null,

    /* The packagings object is an array of individual packaging component objects.  The Packaging data document explains how packaging data is structured in Open Food Facts: https://openfoodfacts.github.io/openfoodfacts-server/dev/explain-packaging-data/  The shape, material and recycling properties of each packaging component are linked to entries in the packaging_shapes, packaging_materials and packaging_recycling taxonomies:  https://world.openfoodfacts.org/data/taxonomies/packaging_shapes.json https://world.openfoodfacts.org/data/taxonomies/packaging_materials.json https://world.openfoodfacts.org/data/taxonomies/packaging_recycling.json  If the tags_lc field is set, the properties will include a lc_name field with the translation in the requested language. */
    @SerialName("packagings")
    val packagings: kotlin.collections.List<PackagingComponentREAD>? = null,

    /* Indicate if the packagings array contains all the packaging parts of the product. This field can be set by users when they enter or verify packaging data. Possible values are 0 or 1. */
    @SerialName("packagings_complete")
    val packagingsComplete: kotlin.Int? = null,

    /* Category of food according to [French Nutrition and Health Program](https://fr.wikipedia.org/wiki/Programme_national_nutrition_sant%C3%A9)  */
    @SerialName("pnns_groups_1")
    val pnnsGroups1: kotlin.String? = null,

    @SerialName("pnns_groups_1_tags")
    val pnnsGroups1Tags: kotlin.collections.List<kotlin.String>? = null,

    /* Sub Category of food according to [French Nutrition and Health Program](https://fr.wikipedia.org/wiki/Programme_national_nutrition_sant%C3%A9)  */
    @SerialName("pnns_groups_2")
    val pnnsGroups2: kotlin.String? = null,

    @SerialName("pnns_groups_2_tags")
    val pnnsGroups2Tags: kotlin.collections.List<kotlin.String>? = null,

    /* An imprecise measurement of popularity based on Scan statistics. A higher value means higher popularity.  */
    @SerialName("popularity_key")
    val popularityKey: kotlin.Int? = null,

    /* Indicators for the popularity of a product, like the amount of scans in a specific year.  */
    @SerialName("popularity_tags")
    val popularityTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("scans_n")
    val scansN: kotlin.Int? = null,

    @SerialName("unique_scans_n")
    val uniqueScansN: kotlin.Int? = null,

    /* Normalized version of serving_size. Note that this is NOT the number of servings by product. <small>(in perl, see `normalize_serving_size`)</small>  */
    @SerialName("serving_quantity")
    val servingQuantity: kotlin.String? = null,

    /* The unit (either g or ml) for the correponding serving_quantity.  */
    @SerialName("serving_quantity_unit")
    val servingQuantityUnit: kotlin.String? = null,

    /* Serving size text (generally in g or ml). We expect a quantity + unit but the user is free to input any string.  */
    @SerialName("serving_size")
    val servingSize: kotlin.String? = null,

    /* List of brands (not taxonomized) */
    @SerialName("brands")
    val brands: kotlin.String? = null,

    @SerialName("brands_tags")
    val brandsTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("categories")
    val categories: kotlin.String? = null,

    @SerialName("categories_hierarchy")
    val categoriesHierarchy: kotlin.collections.List<kotlin.String>? = null,

    /* Categories language code */
    @SerialName("categories_lc")
    val categoriesLc: kotlin.String? = null,

    @SerialName("categories_tags")
    val categoriesTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("checkers_tags")
    val checkersTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("cities")
    val cities: kotlin.String? = null,

    @SerialName("cities_tags")
    val citiesTags: kotlin.collections.List<JsonElement>? = null,

    @SerialName("correctors_tags")
    val correctorsTags: kotlin.collections.List<kotlin.String>? = null,

    /* List of countries where the product is sold.  */
    @SerialName("countries")
    val countries: kotlin.String? = null,

    @SerialName("countries_hierarchy")
    val countriesHierarchy: kotlin.collections.List<kotlin.String>? = null,

    /* Countries language code */
    @SerialName("countries_lc")
    val countriesLc: kotlin.String? = null,

    @SerialName("countries_tags")
    val countriesTags: kotlin.collections.List<kotlin.String>? = null,

    /* All ecoscore of a product. Most of the time it's only one value, but it might eventually be more for products composed of sub-products. See also: `ecoscore_score`, `ecoscore_grade`.  */
    @SerialName("ecoscore_tags")
    val ecoscoreTags: kotlin.collections.List<kotlin.String>? = null,

    /* Packager code. EMB is the French system of traceability codes for packager.  */
    @SerialName("emb_codes")
    val embCodes: kotlin.String? = null,

    @SerialName("emb_codes_orig")
    val embCodesOrig: kotlin.String? = null,

    @SerialName("emb_codes_tags")
    val embCodesTags: kotlin.collections.List<JsonElement>? = null,

    @SerialName("labels")
    val labels: kotlin.String? = null,

    @SerialName("labels_hierarchy")
    val labelsHierarchy: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("labels_lc")
    val labelsLc: kotlin.String? = null,

    @SerialName("labels_tags")
    val labelsTags: kotlin.collections.List<kotlin.String>? = null,

    /* The data as a series of tag: `yyyy-mm-dd`, `yyyy-mm`, `yyyy`  */
    @SerialName("entry_dates_tags")
    val entryDatesTags: kotlin.collections.List<kotlin.String>? = null,

    /* Places where the product was manufactured or transformed.  */
    @SerialName("manufacturing_places")
    val manufacturingPlaces: kotlin.String? = null,

    @SerialName("manufacturing_places_tags")
    val manufacturingPlacesTags: kotlin.collections.List<JsonElement>? = null,

    @SerialName("nova_groups_tags")
    val novaGroupsTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("nutrient_levels_tags")
    val nutrientLevelsTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("image_front_small_url")
    val imageFrontSmallUrl: kotlin.String? = null,

    @SerialName("image_front_thumb_url")
    val imageFrontThumbUrl: kotlin.String? = null,

    @SerialName("image_front_url")
    val imageFrontUrl: kotlin.String? = null,

    @SerialName("image_nutrition_small_url")
    val imageNutritionSmallUrl: kotlin.String? = null,

    @SerialName("image_nutrition_thumb_url")
    val imageNutritionThumbUrl: kotlin.String? = null,

    @SerialName("image_nutrition_url")
    val imageNutritionUrl: kotlin.String? = null,

    @SerialName("image_small_url")
    val imageSmallUrl: kotlin.String? = null,

    @SerialName("image_thumb_url")
    val imageThumbUrl: kotlin.String? = null,

    @SerialName("image_url")
    val imageUrl: kotlin.String? = null,

    @SerialName("images")
    val images: GetProductByBarcode200ResponseAllOfAllOfImages? = null,

    @SerialName("last_image_dates_tags")
    val lastImageDatesTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("last_image_t")
    val lastImageT: kotlin.Int? = null,

    @SerialName("selected_images")
    val selectedImages: GetProductByBarcode200ResponseAllOfAllOfSelectedImages? = null,

    @SerialName("ecoscore_data")
    val ecoscoreData: GetProductByBarcode200ResponseAllOfAllOfEcoscoreData? = null,

    @SerialName("ecoscore_extended_data_version")
    val ecoscoreExtendedDataVersion: kotlin.String? = null,

    @SerialName("environment_impact_level")
    val environmentImpactLevel: kotlin.String? = null,

    @SerialName("environment_impact_level_tags")
    val environmentImpactLevelTags: kotlin.collections.List<JsonElement>? = null,

    @SerialName("additives_tags")
    val additivesTags: kotlin.collections.List<kotlin.String>? = null,

    /* comma separated list of allergens */
    @SerialName("allergens")
    val allergens: kotlin.String? = null,

    /* language in which `allergens` where input */
    @SerialName("allergens_lc")
    val allergensLc: kotlin.String? = null,

    @SerialName("allergens_hierarchy")
    val allergensHierarchy: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("allergens_tags")
    val allergensTags: kotlin.collections.List<kotlin.String>? = null,

    /* This structure gives the different ingredients and some information about them, like estimate on their quantity.  */
    @SerialName("ingredients")
    val ingredients: kotlin.collections.List<GetProductByBarcode200ResponseAllOfAllOfIngredientsInner>? = null,

    @SerialName("ingredients_analysis")
    val ingredientsAnalysis: GetProductByBarcode200ResponseAllOfAllOfIngredientsAnalysis? = null,

    @SerialName("ingredients_analysis_tags")
    val ingredientsAnalysisTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("ingredients_from_or_that_may_be_from_palm_oil_n")
    val ingredientsFromOrThatMayBeFromPalmOilN: kotlin.Int? = null,

    @SerialName("ingredients_from_palm_oil_n")
    val ingredientsFromPalmOilN: kotlin.Int? = null,

    @SerialName("ingredients_from_palm_oil_tags")
    val ingredientsFromPalmOilTags: kotlin.collections.List<JsonElement>? = null,

    @SerialName("ingredients_hierarchy")
    val ingredientsHierarchy: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("ingredients_n")
    val ingredientsN: kotlin.Int? = null,

    @SerialName("ingredients_n_tags")
    val ingredientsNTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("ingredients_original_tags")
    val ingredientsOriginalTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("ingredients_percent_analysis")
    val ingredientsPercentAnalysis: kotlin.Int? = null,

    /* Number of sweeteners additives in the ingredients. Undefined if ingredients are not specified.  */
    @SerialName("ingredients_sweeteners_n")
    val ingredientsSweetenersN: kotlin.Int? = null,

    /* Number of non-nutritive sweeteners additives (as specified in the Nutri-Score formula) in the ingredients. Undefined if ingredients are not specified.  */
    @SerialName("ingredients_non_nutritive_sweeteners_n")
    val ingredientsNonNutritiveSweetenersN: kotlin.Int? = null,

    @SerialName("ingredients_tags")
    val ingredientsTags: kotlin.collections.List<kotlin.String>? = null,

    /* Language that was used to parse the ingredient list. If `ingredients_text` is available for the product main language (`lang`), `ingredients_lc=lang`, otherwise we look at `ingredients_text` fields for other languages and set `ingredients_lc` to the first non-empty `ingredient_text`.   */
    @SerialName("ingredients_lc")
    val ingredientsLc: kotlin.String? = null,

    /* Raw list of ingredients. This will get automatically parsed and get used to compute the Eco-Score or find allergens, etc..  It's a copy of ingredients_text in the main language of the product (see `lang` proprety).  */
    @SerialName("ingredients_text")
    val ingredientsText: kotlin.String? = null,

    /* Same text as `ingredients_text` but where allergens have HTML elements around them to identify them  */
    @SerialName("ingredients_text_with_allergens")
    val ingredientsTextWithAllergens: kotlin.String? = null,

    @SerialName("ingredients_that_may_be_from_palm_oil_n")
    val ingredientsThatMayBeFromPalmOilN: kotlin.Int? = null,

    @SerialName("ingredients_that_may_be_from_palm_oil_tags")
    val ingredientsThatMayBeFromPalmOilTags: kotlin.collections.List<JsonElement>? = null,

    @SerialName("ingredients_with_specified_percent_n")
    val ingredientsWithSpecifiedPercentN: kotlin.Int? = null,

    @SerialName("ingredients_with_specified_percent_sum")
    val ingredientsWithSpecifiedPercentSum: kotlin.Int? = null,

    @SerialName("ingredients_with_unspecified_percent_n")
    val ingredientsWithUnspecifiedPercentN: kotlin.Int? = null,

    @SerialName("ingredients_with_unspecified_percent_sum")
    val ingredientsWithUnspecifiedPercentSum: kotlin.Int? = null,

    @SerialName("known_ingredients_n")
    val knownIngredientsN: kotlin.Int? = null,

    /* Origins of ingredients  */
    @SerialName("origins")
    val origins: kotlin.String? = null,

    @SerialName("origins_hierarchy")
    val originsHierarchy: kotlin.collections.List<JsonElement>? = null,

    @SerialName("origins_lc")
    val originsLc: kotlin.String? = null,

    @SerialName("origins_tags")
    val originsTags: kotlin.collections.List<JsonElement>? = null,

    /* List of substances that might cause allergies that are present in trace amounts in the product (this does not include the ingredients, as they are not only present in trace amounts). It is taxonomized with the allergens taxonomy.  */
    @SerialName("traces")
    val traces: kotlin.String? = null,

    @SerialName("traces_hierarchy")
    val tracesHierarchy: kotlin.collections.List<JsonElement>? = null,

    @SerialName("traces_lc")
    val tracesLc: kotlin.String? = null,

    @SerialName("traces_tags")
    val tracesTags: kotlin.collections.List<JsonElement>? = null,

    @SerialName("unknown_ingredients_n")
    val unknownIngredientsN: kotlin.Int? = null,

    /* When a product does not have nutrition data displayed on the packaging, the user can check the field \"Nutrition facts are not specified on the product\". By doing so, the no_nutrition_data field takes the value \"on\". This case is frequent (thousands of products).  */
    @SerialName("no_nutrition_data")
    val noNutritionData: kotlin.String? = null,

    /* The nutrition data on the package can be per serving or per 100g.  This is essential to understand if `<nutrient>_value` and `<nutrient>` values in `nutriments` applies for a serving or for 100g.  **IMPORTANT:** When writing products, this setting applies to all existing nutrients values for the product, not only the nutrient values sent in the write request. So it should not be changed unless all nutrients values are provided with values that match the nutrition_data_per field.  */
    @SerialName("nutrition_data_per")
    val nutritionDataPer: GetProductByBarcode200Response.NutritionDataPer? = null,

    /* The nutrition data for prepared product on the package (if any) can be per serving or per 100g.  This is essential to understand if `<nutrient>_prepared_value` and `<nutrient>_prepared` values in `nutriments` applies for a serving or for 100g.  See also important note on `nutrition_data_per`.  */
    @SerialName("nutrition_data_prepared_per")
    val nutritionDataPreparedPer: GetProductByBarcode200Response.NutritionDataPreparedPer? = null,

    @SerialName("nutriments")
    val nutriments: GetProductByBarcode200ResponseAllOfAllOfNutriments? = null,

    @SerialName("nutriscore_data")
    val nutriscoreData: GetProductByBarcode200ResponseAllOfAllOfNutriscoreData? = null,

    /* Nutri-Score for the product as a letter.  See https://world.openfoodfacts.org/nutriscore.  */
    @SerialName("nutriscore_grade")
    val nutriscoreGrade: /*GetProductByBarcode200Response.NutriscoreGrade*/String? = null,

    /* Nutri-Score for the product as an integer (see also `nutriscore_grade`).  */
    @SerialName("nutriscore_score")
    val nutriscoreScore: kotlin.Int? = null,

    @SerialName("nutriscore_score_opposite")
    val nutriscoreScoreOpposite: kotlin.Int? = null,

    /* Nutrition grade (‘a’ to ‘e’), https://world.openfoodfacts.org/nutriscore.  */
    @SerialName("nutrition_grade_fr")
    val nutritionGradeFr: kotlin.String? = null,

    /* Nutrition grades as a comma separated list.  Some products with multiple components might have multiple Nutri-Score  */
    @SerialName("nutrition_grades")
    val nutritionGrades: kotlin.String? = null,

    @SerialName("nutrition_grades_tags")
    val nutritionGradesTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("nutrition_score_beverage")
    val nutritionScoreBeverage: kotlin.Int? = null,

    @SerialName("nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients")
    val nutritionScoreWarningFruitsVegetablesNutsEstimateFromIngredients: kotlin.Int? = null,

    @SerialName("nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value")
    val nutritionScoreWarningFruitsVegetablesNutsEstimateFromIngredientsValue: Double? = null,

    @SerialName("nutrition_score_warning_no_fiber")
    val nutritionScoreWarningNoFiber: kotlin.Int? = null,

    @SerialName("other_nutritional_substances_tags")
    val otherNutritionalSubstancesTags: kotlin.collections.List<JsonElement>? = null,

    @SerialName("unknown_nutrients_tags")
    val unknownNutrientsTags: kotlin.collections.List<JsonElement>? = null,

    @SerialName("vitamins_tags")
    val vitaminsTags: kotlin.collections.List<JsonElement>? = null,

    @SerialName("data_quality_bugs_tags")
    val dataQualityBugsTags: kotlin.collections.List<JsonElement>? = null,

    @SerialName("data_quality_errors_tags")
    val dataQualityErrorsTags: kotlin.collections.List<JsonElement>? = null,

    @SerialName("data_quality_info_tags")
    val dataQualityInfoTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("data_quality_tags")
    val dataQualityTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("data_quality_warnings_tags")
    val dataQualityWarningsTags: kotlin.collections.List<kotlin.String>? = null,

    /* Source of data imported from producers.  */
    @SerialName("data_sources")
    val dataSources: kotlin.String? = null,

    @SerialName("data_sources_tags")
    val dataSourcesTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("last_check_dates_tags")
    val lastCheckDatesTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("last_checked_t")
    val lastCheckedT: kotlin.Int? = null,

    @SerialName("last_checker")
    val lastChecker: kotlin.String? = null,

    /* comma separated list of values indicating some states of the product, like things to be done, or to be completed. See [states taxonomy](https://static.openfoodfacts.net/data/taxonomies/states.json)  */
    @SerialName("states")
    val states: kotlin.String? = null,

    @SerialName("states_hierarchy")
    val statesHierarchy: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("states_tags")
    val statesTags: kotlin.collections.List<kotlin.String>? = null,

    /* Information about different aspect of the product  */
    @SerialName("misc_tags")
    val miscTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("additives_original_tags")
    val additivesOriginalTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("additives_prev_original_tags")
    val additivesPrevOriginalTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("added_countries_tags")
    val addedCountriesTags: kotlin.collections.List<JsonElement>? = null,

    @SerialName("allergens_from_ingredients")
    val allergensFromIngredients: kotlin.String? = null,

    @SerialName("allergens_from_user")
    val allergensFromUser: kotlin.String? = null,

    @SerialName("amino_acids_prev_tags")
    val aminoAcidsPrevTags: kotlin.collections.List<JsonElement>? = null,

    @SerialName("amino_acids_tags")
    val aminoAcidsTags: kotlin.collections.List<JsonElement>? = null,

    @SerialName("carbon_footprint_percent_of_known_ingredients")
    val carbonFootprintPercentOfKnownIngredients: kotlin.Int? = null,

    @SerialName("categories_properties")
    val categoriesProperties: GetProductByBarcode200ResponseAllOfAllOfCategoriesProperties? = null,

    @SerialName("categories_properties_tags")
    val categoriesPropertiesTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("category_properties")
    val categoryProperties: kotlin.collections.Map<kotlin.String, kotlin.String>? = null,

    @SerialName("ciqual_food_name_tags")
    val ciqualFoodNameTags: kotlin.collections.List<kotlin.String>? = null,

    /* the category to use for comparison.  **TODO** explain how it is chosen.  */
    @SerialName("compared_to_category")
    val comparedToCategory: kotlin.String? = null,

    @SerialName("conservation_conditions")
    val conservationConditions: kotlin.String? = null,

    /* Contact info of customer service.  */
    @SerialName("customer_service")
    val customerService: kotlin.String? = null,

    @SerialName("expiration_date")
    val expirationDate: kotlin.String? = null,

    /* link to the product on the website of the producer  */
    @SerialName("link")
    val link: kotlin.String? = null,

    @SerialName("main_countries_tags")
    val mainCountriesTags: kotlin.collections.List<JsonElement>? = null,

    @SerialName("minerals_prev_tags")
    val mineralsPrevTags: kotlin.collections.List<JsonElement>? = null,

    @SerialName("minerals_tags")
    val mineralsTags: kotlin.collections.List<JsonElement>? = null,

    @SerialName("owner_fields")
    val ownerFields: JsonObject? = null,

    @SerialName("nova_groups_markers")
    val novaGroupsMarkers: GetProductByBarcode200ResponseAllOfAllOfNovaGroupsMarkers? = null,

    @SerialName("nucleotides_tags")
    val nucleotidesTags: kotlin.collections.List<JsonElement>? = null,

    @SerialName("origin")
    val origin: kotlin.String? = null,

    /* Country, state, or city where the product can be purchased.  */
    @SerialName("purchase_places")
    val purchasePlaces: kotlin.String? = null,

    @SerialName("purchase_places_tags")
    val purchasePlacesTags: kotlin.collections.List<kotlin.String>? = null,

    /* Distributor name.  */
    @SerialName("stores")
    val stores: kotlin.String? = null,

    @SerialName("stores_tags")
    val storesTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("traces_from_ingredients")
    val tracesFromIngredients: kotlin.String? = null,

    @SerialName("traces_from_user")
    val tracesFromUser: kotlin.String? = null,

    /* Date when the product was added (UNIX timestamp format). See also `entry_dates_tags`  */
    @SerialName("created_t")
    val createdT: kotlin.Int? = null,

    /* The contributor who added the product first.  */
    @SerialName("creator")
    val creator: kotlin.String? = null,

    /* List of editors who edited the product.  */
    @SerialName("editors_tags")
    val editorsTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("informers_tags")
    val informersTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("interface_version_created")
    val interfaceVersionCreated: kotlin.String? = null,

    @SerialName("interface_version_modified")
    val interfaceVersionModified: kotlin.String? = null,

    @SerialName("languages")
    val languages: JsonElement? = null,

    /* Same as `languages` but by language code, instead of language tags  */
    @SerialName("languages_codes")
    val languagesCodes: JsonElement? = null,

    @SerialName("languages_hierarchy")
    val languagesHierarchy: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("languages_tags")
    val languagesTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("last_edit_dates_tags")
    val lastEditDatesTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("last_editor")
    val lastEditor: kotlin.String? = null,

    /* The username of the user who last modified the product.  */
    @SerialName("last_modified_by")
    val lastModifiedBy: kotlin.String? = null,

    /* Date when the product page was last modified.  */
    @SerialName("last_modified_t")
    val lastModifiedT: kotlin.Int? = null,

    /* Id of the producer in case he provides his own data about a product (producer platform).  */
    @SerialName("owner")
    val owner: kotlin.String? = null,

    /* Tagyfied version of owner  */
    @SerialName("owners_tags")
    val ownersTags: kotlin.String? = null,

    @SerialName("photographers_tags")
    val photographersTags: kotlin.collections.List<kotlin.String>? = null,

    /* revision number of this product version (each edit adds a revision) */
    @SerialName("rev")
    val rev: kotlin.Int? = null,

    @SerialName("sources")
    val sources: kotlin.collections.List<GetProductByBarcode200ResponseAllOfAllOfSourcesInner>? = null,

    @SerialName("sources_fields")
    val sourcesFields: GetProductByBarcode200ResponseAllOfAllOfSourcesFields? = null,

    @SerialName("teams")
    val teams: kotlin.String? = null,

    @SerialName("teams_tags")
    val teamsTags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName("update_key")
    val updateKey: kotlin.String? = null,

    @SerialName("knowledge_panels")
    val knowledgePanels: Panels? = null,

    /* Each element is an attribute that can help compute a personal ranking for the product */
    @SerialName("attribute_groups")
    val attributeGroups: kotlin.collections.List<GetProductByBarcode200ResponseAllOfAllOfAttributeGroupsInner>? = null

) {

    /**
     * Overall status of the request: whether it failed or succeeded, with or without warnings or errors.
     *
     * Values: success,success_with_warnings,success_with_errors,failure
     */
    // @JsonClass(generateAdapter = false)
    enum class StatusId(val value: kotlin.String) {
        @SerialName("success") success("success"),
        @SerialName("success_with_warnings") success_with_warnings("success_with_warnings"),
        @SerialName("success_with_errors") success_with_errors("success_with_errors"),
        @SerialName("failure") failure("failure");
    }
    /**
     * The nutrition data on the package can be per serving or per 100g.  This is essential to understand if `<nutrient>_value` and `<nutrient>` values in `nutriments` applies for a serving or for 100g.  **IMPORTANT:** When writing products, this setting applies to all existing nutrients values for the product, not only the nutrient values sent in the write request. So it should not be changed unless all nutrients values are provided with values that match the nutrition_data_per field. 
     *
     * Values: serving,_100g
     */
    // @JsonClass(generateAdapter = false)
    enum class NutritionDataPer(val value: kotlin.String) {
        @SerialName("serving") serving("serving"),
        @SerialName("100g") _100g("100g");
    }
    /**
     * The nutrition data for prepared product on the package (if any) can be per serving or per 100g.  This is essential to understand if `<nutrient>_prepared_value` and `<nutrient>_prepared` values in `nutriments` applies for a serving or for 100g.  See also important note on `nutrition_data_per`. 
     *
     * Values: serving,_100g
     */
    // @JsonClass(generateAdapter = false)
    enum class NutritionDataPreparedPer(val value: kotlin.String) {
        @SerialName("serving") serving("serving"),
        @SerialName("100g") _100g("100g");
    }
    /**
     * Nutri-Score for the product as a letter.  See https://world.openfoodfacts.org/nutriscore. 
     *
     * Values: a,b,c,d,e
     */
    // @JsonClass(generateAdapter = false)
    enum class NutriscoreGrade(val value: kotlin.String) {
        @SerialName("a") a("a"),
        @SerialName("b") b("b"),
        @SerialName("c") c("c"),
        @SerialName("d") d("d"),
        @SerialName("e") e("e");
    }

}

