/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.offscale.openfoodfacts.client.models


import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.JsonElement

/**
 * All known nutrients for the product.  Note that each nutrients are declined with a variety of suffixes like `_100g`, `_serving`, see patternProperties below.  A specific `_unit` is the unit used to measure the nutrient.  Beware that some properties are to be interpreted based upon `nutrition_data_per` value.  Also for products that have a nutrition table for prepared product (eg. the nutrition facts for a bowl of milk with cocoa powder), a `_prepared` suffix is added (before other suffixes).  You can get all possible nutrients from the [nutrients taxonomy](https://static.openfoodfacts.org/data/taxonomies/nutrients.json)  **FIXME** add more nutrients with description. 
 *
 * @param alcohol Quantity of alcohol  (per 100g or per serving) in a standard unit (g or ml) 
 * @param carbohydrates 
 * @param energy It is the same as `energy-kj` if we have it, or computed from `energy-kcal` otherwise  (per 100g or per serving) in kj 
 * @param energyValue energy_value will be equal to energy-kj_value if we have it or to energy-kcal_value otherwise 
 * @param energyUnit Equal to energy-kj_unit if we have it or to energy-kcal_unit otherwise 
 * @param energyKcal energy in kcal, if it is specified  (per 100g or per serving) in a standard unit (g or ml) 
 * @param energyKj energy in kj, if it is specified  (per 100g or per serving) in a standard unit (g or ml) 
 * @param fat 
 * @param fruitsVegetablesLegumesEstimateFromIngredients An estimate, from the ingredients list of the percentage of fruits, vegetable and legumes. This is an important information for Nutri-Score (2023 version) computation. 
 * @param fruitsVegetablesNutsEstimateFromIngredients An estimate, from the ingredients list of the percentage of fruits, vegetable and nuts. This is an important information for Nutri-Score (2021 version) computation. 
 * @param novaGroup 
 * @param nutritionScoreFr 
 * @param proteins 
 * @param salt 
 * @param saturatedFat 
 * @param sodium 
 * @param sugars 
 * @param carbonFootprintFromKnownIngredientsProduct 
 * @param carbonFootprintFromKnownIngredientsServing 
 * @param erythritol erythritol is a polyol which is not providing any energy. As such, it needs not be taken into account when computing the energy of a product. Eryhtritol is now displayed on nutrition facts sheet of some products, mainly in the USA. This value is entered either by contributors, either by imports. 
 */

@Serializable
data class GetProductByBarcode200ResponseAllOfAllOfNutriments (

    /* Quantity of alcohol  (per 100g or per serving) in a standard unit (g or ml)  */
    @SerialName("alcohol")
    val alcohol: Double? = null,

    @SerialName("carbohydrates")
    val carbohydrates: Double? = null,

    /* It is the same as `energy-kj` if we have it, or computed from `energy-kcal` otherwise  (per 100g or per serving) in kj  */
    @SerialName("energy")
    val energy: Double? = null,

    /* energy_value will be equal to energy-kj_value if we have it or to energy-kcal_value otherwise  */
    @SerialName("energy_value")
    val energyValue: Double? = null,

    /* Equal to energy-kj_unit if we have it or to energy-kcal_unit otherwise  */
    @SerialName("energy_unit")
    val energyUnit: io.offscale.openfoodfacts.client.models.GetProductByBarcode200ResponseAllOfAllOfNutriments.EnergyUnit? = null,

    /* energy in kcal, if it is specified  (per 100g or per serving) in a standard unit (g or ml)  */
    @SerialName("energy-kcal")
    val energyKcal: Double? = null,

    /* energy in kj, if it is specified  (per 100g or per serving) in a standard unit (g or ml)  */
    @SerialName("energy-kj")
    val energyKj: Double? = null,

    @SerialName("fat")
    val fat: Double? = null,

    /* An estimate, from the ingredients list of the percentage of fruits, vegetable and legumes. This is an important information for Nutri-Score (2023 version) computation.  */
    @SerialName("fruits-vegetables-legumes-estimate-from-ingredients")
    val fruitsVegetablesLegumesEstimateFromIngredients: Double? = null,

    /* An estimate, from the ingredients list of the percentage of fruits, vegetable and nuts. This is an important information for Nutri-Score (2021 version) computation.  */
    @SerialName("fruits-vegetables-nuts-estimate-from-ingredients")
    val fruitsVegetablesNutsEstimateFromIngredients: Double? = null,

    @SerialName("nova-group")
    val novaGroup: kotlin.Int? = null,

    @SerialName("nutrition-score-fr")
    val nutritionScoreFr: JsonElement? = null,

    @SerialName("proteins")
    val proteins: Double? = null,

    @SerialName("salt")
    val salt: Double? = null,

    @SerialName("saturated-fat")
    val saturatedFat: Double? = null,

    @SerialName("sodium")
    val sodium: Double? = null,

    @SerialName("sugars")
    val sugars: Double? = null,

    @SerialName("carbon-footprint-from-known-ingredients_product")
    val carbonFootprintFromKnownIngredientsProduct: kotlin.Int? = null,

    @SerialName("carbon-footprint-from-known-ingredients_serving")
    val carbonFootprintFromKnownIngredientsServing: Double? = null,

    /* erythritol is a polyol which is not providing any energy. As such, it needs not be taken into account when computing the energy of a product. Eryhtritol is now displayed on nutrition facts sheet of some products, mainly in the USA. This value is entered either by contributors, either by imports.  */
    @SerialName("erythritol")
    val erythritol: Double? = null

) {

    /**
     * Equal to energy-kj_unit if we have it or to energy-kcal_unit otherwise 
     *
     * Values: kcal,kj
     */
    // @JsonClass(generateAdapter = false)
    enum class EnergyUnit(val value: kotlin.String) {
        @SerialName("kcal") kcal("kcal"),
        @SerialName("kj") kj("kj");
    }

}

