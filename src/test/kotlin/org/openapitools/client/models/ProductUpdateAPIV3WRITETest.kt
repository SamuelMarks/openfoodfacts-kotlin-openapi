/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.ProductUpdateAPIV3WRITE
import org.openapitools.client.models.PackagingComponentWRITE

class ProductUpdateAPIV3WRITETest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ProductUpdateAPIV3WRITE
        //val modelInstance = ProductUpdateAPIV3WRITE()

        // to test the property `packagings` - The packagings object is an array of individual packaging component objects.  The Packaging data document explains how packaging data is structured in Open Food Facts: https://openfoodfacts.github.io/openfoodfacts-server/dev/explain-packaging-data/
        should("test packagings") {
            // uncomment below to test the property
            //modelInstance.packagings shouldBe ("TODO")
        }

        // to test the property `packagingsAdd` - The packagings object is an array of individual packaging component objects.  The Packaging data document explains how packaging data is structured in Open Food Facts: https://openfoodfacts.github.io/openfoodfacts-server/dev/explain-packaging-data/
        should("test packagingsAdd") {
            // uncomment below to test the property
            //modelInstance.packagingsAdd shouldBe ("TODO")
        }

        // to test the property `packagingsComplete` - Indicate if the packagings array contains all the packaging parts of the product. This field can be set by users when they enter or verify packaging data. Possible values are 0 or 1.
        should("test packagingsComplete") {
            // uncomment below to test the property
            //modelInstance.packagingsComplete shouldBe ("TODO")
        }

        // to test the property `lang` - 2 letter language code of the main language of the product (the most prominent on the packaging)
        should("test lang") {
            // uncomment below to test the property
            //modelInstance.lang shouldBe ("TODO")
        }

        // to test the property `quantity`
        should("test quantity") {
            // uncomment below to test the property
            //modelInstance.quantity shouldBe ("TODO")
        }

        // to test the property `servingSize`
        should("test servingSize") {
            // uncomment below to test the property
            //modelInstance.servingSize shouldBe ("TODO")
        }

        // to test the property `categoriesTags` - An array of categories
        should("test categoriesTags") {
            // uncomment below to test the property
            //modelInstance.categoriesTags shouldBe ("TODO")
        }

    }
}
