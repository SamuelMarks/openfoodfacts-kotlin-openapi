/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.PatchApiV3ProductBarcode200ResponseAllOfProduct
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfAttributeGroupsInner
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfCategoriesProperties
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfEcoscoreData
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfImages
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfIngredientsAnalysis
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfIngredientsInner
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfNovaGroupsMarkers
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfNutrientLevels
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfNutriments
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfNutriscoreData
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfOwnerFields
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfSelectedImages
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfSourcesFields
import org.openapitools.client.models.GetProductByBarcode200ResponseAllOfAllOfSourcesInner
import org.openapitools.client.models.PackagingComponentREAD
import org.openapitools.client.models.Panels

class PatchApiV3ProductBarcode200ResponseAllOfProductTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of PatchApiV3ProductBarcode200ResponseAllOfProduct
        //val modelInstance = PatchApiV3ProductBarcode200ResponseAllOfProduct()

        // to test the property `abbreviatedProductName` - Abbreviated name in requested language
        should("test abbreviatedProductName") {
            // uncomment below to test the property
            //modelInstance.abbreviatedProductName shouldBe ("TODO")
        }

        // to test the property `code` - barcode of the product (can be EAN-13 or internal codes for some food stores), for products without a barcode, Open Food Facts assigns a number starting with the 200 reserved prefix 
        should("test code") {
            // uncomment below to test the property
            //modelInstance.code shouldBe ("TODO")
        }

        // to test the property `codesTags`
        should("test codesTags") {
            // uncomment below to test the property
            //modelInstance.codesTags shouldBe ("TODO")
        }

        // to test the property `genericName` - Legal name of the product as regulated by the European authorities. 
        should("test genericName") {
            // uncomment below to test the property
            //modelInstance.genericName shouldBe ("TODO")
        }

        // to test the property `id` - internal identifier for the product, usually set to the value of `code`, except on the producers platform where it is prefixed by the owner 
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `lc` - Main language of the product. This is a duplicate of `lang` property (for historical reasons). 
        should("test lc") {
            // uncomment below to test the property
            //modelInstance.lc shouldBe ("TODO")
        }

        // to test the property `lang` - Main language of the product.  This should be the main language of product packaging (if one is predominant).  Main language is also used to decide which ingredients list to parse. 
        should("test lang") {
            // uncomment below to test the property
            //modelInstance.lang shouldBe ("TODO")
        }

        // to test the property `novaGroup` - Nova group as an integer from 1 to 4. See https://world.openfoodfacts.org/nova 
        should("test novaGroup") {
            // uncomment below to test the property
            //modelInstance.novaGroup shouldBe ("TODO")
        }

        // to test the property `novaGroups`
        should("test novaGroups") {
            // uncomment below to test the property
            //modelInstance.novaGroups shouldBe ("TODO")
        }

        // to test the property `obsolete`
        should("test obsolete") {
            // uncomment below to test the property
            //modelInstance.obsolete shouldBe ("TODO")
        }

        // to test the property `obsoleteSinceDate` - A date at which the product was declared obsolete. This means it's not produced any more. 
        should("test obsoleteSinceDate") {
            // uncomment below to test the property
            //modelInstance.obsoleteSinceDate shouldBe ("TODO")
        }

        // to test the property `productName` - The name of the product 
        should("test productName") {
            // uncomment below to test the property
            //modelInstance.productName shouldBe ("TODO")
        }

        // to test the property `productNameEn` - The name of the product can also be in many other languages like product_name_fr (for French). 
        should("test productNameEn") {
            // uncomment below to test the property
            //modelInstance.productNameEn shouldBe ("TODO")
        }

        // to test the property `productQuantity` - The size in g or ml for the whole product. It's a normalized version of the quantity field. 
        should("test productQuantity") {
            // uncomment below to test the property
            //modelInstance.productQuantity shouldBe ("TODO")
        }

        // to test the property `productQuantityUnit` - The unit (either g or ml) for the correponding product_quantity. 
        should("test productQuantityUnit") {
            // uncomment below to test the property
            //modelInstance.productQuantityUnit shouldBe ("TODO")
        }

        // to test the property `quantity` - Quantity and Unit. 
        should("test quantity") {
            // uncomment below to test the property
            //modelInstance.quantity shouldBe ("TODO")
        }

        // to test the property `additivesN` - Number of food additives. 
        should("test additivesN") {
            // uncomment below to test the property
            //modelInstance.additivesN shouldBe ("TODO")
        }

        // to test the property `checked`
        should("test checked") {
            // uncomment below to test the property
            //modelInstance.checked shouldBe ("TODO")
        }

        // to test the property `complete`
        should("test complete") {
            // uncomment below to test the property
            //modelInstance.complete shouldBe ("TODO")
        }

        // to test the property `completeness`
        should("test completeness") {
            // uncomment below to test the property
            //modelInstance.completeness shouldBe ("TODO")
        }

        // to test the property `ecoscoreGrade` - See also: `ecoscore_tags` 
        should("test ecoscoreGrade") {
            // uncomment below to test the property
            //modelInstance.ecoscoreGrade shouldBe ("TODO")
        }

        // to test the property `ecoscoreScore` - See also: `ecoscore_tags` 
        should("test ecoscoreScore") {
            // uncomment below to test the property
            //modelInstance.ecoscoreScore shouldBe ("TODO")
        }

        // to test the property `foodGroups`
        should("test foodGroups") {
            // uncomment below to test the property
            //modelInstance.foodGroups shouldBe ("TODO")
        }

        // to test the property `foodGroupsTags`
        should("test foodGroupsTags") {
            // uncomment below to test the property
            //modelInstance.foodGroupsTags shouldBe ("TODO")
        }

        // to test the property `nutrientLevels`
        should("test nutrientLevels") {
            // uncomment below to test the property
            //modelInstance.nutrientLevels shouldBe ("TODO")
        }

        // to test the property `packagingText` - Recycling instructions as raw text, e.g. Plastic bottle to recycle, Plastic cap to recycle. This will get automatically parsed and will be used to compute the Eco-Score. You can either request it (if it exists) or send it in a specific language. 
        should("test packagingText") {
            // uncomment below to test the property
            //modelInstance.packagingText shouldBe ("TODO")
        }

        // to test the property `packagings` - The packagings object is an array of individual packaging component objects.  The Packaging data document explains how packaging data is structured in Open Food Facts: https://openfoodfacts.github.io/openfoodfacts-server/dev/explain-packaging-data/  The shape, material and recycling properties of each packaging component are linked to entries in the packaging_shapes, packaging_materials and packaging_recycling taxonomies:  https://world.openfoodfacts.org/data/taxonomies/packaging_shapes.json https://world.openfoodfacts.org/data/taxonomies/packaging_materials.json https://world.openfoodfacts.org/data/taxonomies/packaging_recycling.json  If the tags_lc field is set, the properties will include a lc_name field with the translation in the requested language.
        should("test packagings") {
            // uncomment below to test the property
            //modelInstance.packagings shouldBe ("TODO")
        }

        // to test the property `packagingsComplete` - Indicate if the packagings array contains all the packaging parts of the product. This field can be set by users when they enter or verify packaging data. Possible values are 0 or 1.
        should("test packagingsComplete") {
            // uncomment below to test the property
            //modelInstance.packagingsComplete shouldBe ("TODO")
        }

        // to test the property `pnnsGroups1` - Category of food according to [French Nutrition and Health Program](https://fr.wikipedia.org/wiki/Programme_national_nutrition_sant%C3%A9) 
        should("test pnnsGroups1") {
            // uncomment below to test the property
            //modelInstance.pnnsGroups1 shouldBe ("TODO")
        }

        // to test the property `pnnsGroups1Tags`
        should("test pnnsGroups1Tags") {
            // uncomment below to test the property
            //modelInstance.pnnsGroups1Tags shouldBe ("TODO")
        }

        // to test the property `pnnsGroups2` - Sub Category of food according to [French Nutrition and Health Program](https://fr.wikipedia.org/wiki/Programme_national_nutrition_sant%C3%A9) 
        should("test pnnsGroups2") {
            // uncomment below to test the property
            //modelInstance.pnnsGroups2 shouldBe ("TODO")
        }

        // to test the property `pnnsGroups2Tags`
        should("test pnnsGroups2Tags") {
            // uncomment below to test the property
            //modelInstance.pnnsGroups2Tags shouldBe ("TODO")
        }

        // to test the property `popularityKey` - An imprecise measurement of popularity based on Scan statistics. A higher value means higher popularity. 
        should("test popularityKey") {
            // uncomment below to test the property
            //modelInstance.popularityKey shouldBe ("TODO")
        }

        // to test the property `popularityTags` - Indicators for the popularity of a product, like the amount of scans in a specific year. 
        should("test popularityTags") {
            // uncomment below to test the property
            //modelInstance.popularityTags shouldBe ("TODO")
        }

        // to test the property `scansN`
        should("test scansN") {
            // uncomment below to test the property
            //modelInstance.scansN shouldBe ("TODO")
        }

        // to test the property `uniqueScansN`
        should("test uniqueScansN") {
            // uncomment below to test the property
            //modelInstance.uniqueScansN shouldBe ("TODO")
        }

        // to test the property `servingQuantity` - Normalized version of serving_size. Note that this is NOT the number of servings by product. <small>(in perl, see `normalize_serving_size`)</small> 
        should("test servingQuantity") {
            // uncomment below to test the property
            //modelInstance.servingQuantity shouldBe ("TODO")
        }

        // to test the property `servingQuantityUnit` - The unit (either g or ml) for the correponding serving_quantity. 
        should("test servingQuantityUnit") {
            // uncomment below to test the property
            //modelInstance.servingQuantityUnit shouldBe ("TODO")
        }

        // to test the property `servingSize` - Serving size text (generally in g or ml). We expect a quantity + unit but the user is free to input any string. 
        should("test servingSize") {
            // uncomment below to test the property
            //modelInstance.servingSize shouldBe ("TODO")
        }

        // to test the property `brands` - List of brands (not taxonomized)
        should("test brands") {
            // uncomment below to test the property
            //modelInstance.brands shouldBe ("TODO")
        }

        // to test the property `brandsTags`
        should("test brandsTags") {
            // uncomment below to test the property
            //modelInstance.brandsTags shouldBe ("TODO")
        }

        // to test the property `categories`
        should("test categories") {
            // uncomment below to test the property
            //modelInstance.categories shouldBe ("TODO")
        }

        // to test the property `categoriesHierarchy`
        should("test categoriesHierarchy") {
            // uncomment below to test the property
            //modelInstance.categoriesHierarchy shouldBe ("TODO")
        }

        // to test the property `categoriesLc` - Categories language code
        should("test categoriesLc") {
            // uncomment below to test the property
            //modelInstance.categoriesLc shouldBe ("TODO")
        }

        // to test the property `categoriesTags`
        should("test categoriesTags") {
            // uncomment below to test the property
            //modelInstance.categoriesTags shouldBe ("TODO")
        }

        // to test the property `checkersTags`
        should("test checkersTags") {
            // uncomment below to test the property
            //modelInstance.checkersTags shouldBe ("TODO")
        }

        // to test the property `cities`
        should("test cities") {
            // uncomment below to test the property
            //modelInstance.cities shouldBe ("TODO")
        }

        // to test the property `citiesTags`
        should("test citiesTags") {
            // uncomment below to test the property
            //modelInstance.citiesTags shouldBe ("TODO")
        }

        // to test the property `correctorsTags`
        should("test correctorsTags") {
            // uncomment below to test the property
            //modelInstance.correctorsTags shouldBe ("TODO")
        }

        // to test the property `countries` - List of countries where the product is sold. 
        should("test countries") {
            // uncomment below to test the property
            //modelInstance.countries shouldBe ("TODO")
        }

        // to test the property `countriesHierarchy`
        should("test countriesHierarchy") {
            // uncomment below to test the property
            //modelInstance.countriesHierarchy shouldBe ("TODO")
        }

        // to test the property `countriesLc` - Countries language code
        should("test countriesLc") {
            // uncomment below to test the property
            //modelInstance.countriesLc shouldBe ("TODO")
        }

        // to test the property `countriesTags`
        should("test countriesTags") {
            // uncomment below to test the property
            //modelInstance.countriesTags shouldBe ("TODO")
        }

        // to test the property `ecoscoreTags` - All ecoscore of a product. Most of the time it's only one value, but it might eventually be more for products composed of sub-products. See also: `ecoscore_score`, `ecoscore_grade`. 
        should("test ecoscoreTags") {
            // uncomment below to test the property
            //modelInstance.ecoscoreTags shouldBe ("TODO")
        }

        // to test the property `embCodes` - Packager code. EMB is the French system of traceability codes for packager. 
        should("test embCodes") {
            // uncomment below to test the property
            //modelInstance.embCodes shouldBe ("TODO")
        }

        // to test the property `embCodesOrig`
        should("test embCodesOrig") {
            // uncomment below to test the property
            //modelInstance.embCodesOrig shouldBe ("TODO")
        }

        // to test the property `embCodesTags`
        should("test embCodesTags") {
            // uncomment below to test the property
            //modelInstance.embCodesTags shouldBe ("TODO")
        }

        // to test the property `labels`
        should("test labels") {
            // uncomment below to test the property
            //modelInstance.labels shouldBe ("TODO")
        }

        // to test the property `labelsHierarchy`
        should("test labelsHierarchy") {
            // uncomment below to test the property
            //modelInstance.labelsHierarchy shouldBe ("TODO")
        }

        // to test the property `labelsLc`
        should("test labelsLc") {
            // uncomment below to test the property
            //modelInstance.labelsLc shouldBe ("TODO")
        }

        // to test the property `labelsTags`
        should("test labelsTags") {
            // uncomment below to test the property
            //modelInstance.labelsTags shouldBe ("TODO")
        }

        // to test the property `entryDatesTags` - The data as a series of tag: `yyyy-mm-dd`, `yyyy-mm`, `yyyy` 
        should("test entryDatesTags") {
            // uncomment below to test the property
            //modelInstance.entryDatesTags shouldBe ("TODO")
        }

        // to test the property `manufacturingPlaces` - Places where the product was manufactured or transformed. 
        should("test manufacturingPlaces") {
            // uncomment below to test the property
            //modelInstance.manufacturingPlaces shouldBe ("TODO")
        }

        // to test the property `manufacturingPlacesTags`
        should("test manufacturingPlacesTags") {
            // uncomment below to test the property
            //modelInstance.manufacturingPlacesTags shouldBe ("TODO")
        }

        // to test the property `novaGroupsTags`
        should("test novaGroupsTags") {
            // uncomment below to test the property
            //modelInstance.novaGroupsTags shouldBe ("TODO")
        }

        // to test the property `nutrientLevelsTags`
        should("test nutrientLevelsTags") {
            // uncomment below to test the property
            //modelInstance.nutrientLevelsTags shouldBe ("TODO")
        }

        // to test the property `imageFrontSmallUrl`
        should("test imageFrontSmallUrl") {
            // uncomment below to test the property
            //modelInstance.imageFrontSmallUrl shouldBe ("TODO")
        }

        // to test the property `imageFrontThumbUrl`
        should("test imageFrontThumbUrl") {
            // uncomment below to test the property
            //modelInstance.imageFrontThumbUrl shouldBe ("TODO")
        }

        // to test the property `imageFrontUrl`
        should("test imageFrontUrl") {
            // uncomment below to test the property
            //modelInstance.imageFrontUrl shouldBe ("TODO")
        }

        // to test the property `imageNutritionSmallUrl`
        should("test imageNutritionSmallUrl") {
            // uncomment below to test the property
            //modelInstance.imageNutritionSmallUrl shouldBe ("TODO")
        }

        // to test the property `imageNutritionThumbUrl`
        should("test imageNutritionThumbUrl") {
            // uncomment below to test the property
            //modelInstance.imageNutritionThumbUrl shouldBe ("TODO")
        }

        // to test the property `imageNutritionUrl`
        should("test imageNutritionUrl") {
            // uncomment below to test the property
            //modelInstance.imageNutritionUrl shouldBe ("TODO")
        }

        // to test the property `imageSmallUrl`
        should("test imageSmallUrl") {
            // uncomment below to test the property
            //modelInstance.imageSmallUrl shouldBe ("TODO")
        }

        // to test the property `imageThumbUrl`
        should("test imageThumbUrl") {
            // uncomment below to test the property
            //modelInstance.imageThumbUrl shouldBe ("TODO")
        }

        // to test the property `imageUrl`
        should("test imageUrl") {
            // uncomment below to test the property
            //modelInstance.imageUrl shouldBe ("TODO")
        }

        // to test the property `images`
        should("test images") {
            // uncomment below to test the property
            //modelInstance.images shouldBe ("TODO")
        }

        // to test the property `lastImageDatesTags`
        should("test lastImageDatesTags") {
            // uncomment below to test the property
            //modelInstance.lastImageDatesTags shouldBe ("TODO")
        }

        // to test the property `lastImageT`
        should("test lastImageT") {
            // uncomment below to test the property
            //modelInstance.lastImageT shouldBe ("TODO")
        }

        // to test the property `selectedImages`
        should("test selectedImages") {
            // uncomment below to test the property
            //modelInstance.selectedImages shouldBe ("TODO")
        }

        // to test the property `ecoscoreData`
        should("test ecoscoreData") {
            // uncomment below to test the property
            //modelInstance.ecoscoreData shouldBe ("TODO")
        }

        // to test the property `ecoscoreExtendedDataVersion`
        should("test ecoscoreExtendedDataVersion") {
            // uncomment below to test the property
            //modelInstance.ecoscoreExtendedDataVersion shouldBe ("TODO")
        }

        // to test the property `environmentImpactLevel`
        should("test environmentImpactLevel") {
            // uncomment below to test the property
            //modelInstance.environmentImpactLevel shouldBe ("TODO")
        }

        // to test the property `environmentImpactLevelTags`
        should("test environmentImpactLevelTags") {
            // uncomment below to test the property
            //modelInstance.environmentImpactLevelTags shouldBe ("TODO")
        }

        // to test the property `additivesTags`
        should("test additivesTags") {
            // uncomment below to test the property
            //modelInstance.additivesTags shouldBe ("TODO")
        }

        // to test the property `allergens` - comma separated list of allergens
        should("test allergens") {
            // uncomment below to test the property
            //modelInstance.allergens shouldBe ("TODO")
        }

        // to test the property `allergensLc` - language in which `allergens` where input
        should("test allergensLc") {
            // uncomment below to test the property
            //modelInstance.allergensLc shouldBe ("TODO")
        }

        // to test the property `allergensHierarchy`
        should("test allergensHierarchy") {
            // uncomment below to test the property
            //modelInstance.allergensHierarchy shouldBe ("TODO")
        }

        // to test the property `allergensTags`
        should("test allergensTags") {
            // uncomment below to test the property
            //modelInstance.allergensTags shouldBe ("TODO")
        }

        // to test the property `ingredients` - This structure gives the different ingredients and some information about them, like estimate on their quantity. 
        should("test ingredients") {
            // uncomment below to test the property
            //modelInstance.ingredients shouldBe ("TODO")
        }

        // to test the property `ingredientsAnalysis`
        should("test ingredientsAnalysis") {
            // uncomment below to test the property
            //modelInstance.ingredientsAnalysis shouldBe ("TODO")
        }

        // to test the property `ingredientsAnalysisTags`
        should("test ingredientsAnalysisTags") {
            // uncomment below to test the property
            //modelInstance.ingredientsAnalysisTags shouldBe ("TODO")
        }

        // to test the property `ingredientsFromOrThatMayBeFromPalmOilN`
        should("test ingredientsFromOrThatMayBeFromPalmOilN") {
            // uncomment below to test the property
            //modelInstance.ingredientsFromOrThatMayBeFromPalmOilN shouldBe ("TODO")
        }

        // to test the property `ingredientsFromPalmOilN`
        should("test ingredientsFromPalmOilN") {
            // uncomment below to test the property
            //modelInstance.ingredientsFromPalmOilN shouldBe ("TODO")
        }

        // to test the property `ingredientsFromPalmOilTags`
        should("test ingredientsFromPalmOilTags") {
            // uncomment below to test the property
            //modelInstance.ingredientsFromPalmOilTags shouldBe ("TODO")
        }

        // to test the property `ingredientsHierarchy`
        should("test ingredientsHierarchy") {
            // uncomment below to test the property
            //modelInstance.ingredientsHierarchy shouldBe ("TODO")
        }

        // to test the property `ingredientsN`
        should("test ingredientsN") {
            // uncomment below to test the property
            //modelInstance.ingredientsN shouldBe ("TODO")
        }

        // to test the property `ingredientsNTags`
        should("test ingredientsNTags") {
            // uncomment below to test the property
            //modelInstance.ingredientsNTags shouldBe ("TODO")
        }

        // to test the property `ingredientsOriginalTags`
        should("test ingredientsOriginalTags") {
            // uncomment below to test the property
            //modelInstance.ingredientsOriginalTags shouldBe ("TODO")
        }

        // to test the property `ingredientsPercentAnalysis`
        should("test ingredientsPercentAnalysis") {
            // uncomment below to test the property
            //modelInstance.ingredientsPercentAnalysis shouldBe ("TODO")
        }

        // to test the property `ingredientsSweetenersN` - Number of sweeteners additives in the ingredients. Undefined if ingredients are not specified. 
        should("test ingredientsSweetenersN") {
            // uncomment below to test the property
            //modelInstance.ingredientsSweetenersN shouldBe ("TODO")
        }

        // to test the property `ingredientsNonNutritiveSweetenersN` - Number of non-nutritive sweeteners additives (as specified in the Nutri-Score formula) in the ingredients. Undefined if ingredients are not specified. 
        should("test ingredientsNonNutritiveSweetenersN") {
            // uncomment below to test the property
            //modelInstance.ingredientsNonNutritiveSweetenersN shouldBe ("TODO")
        }

        // to test the property `ingredientsTags`
        should("test ingredientsTags") {
            // uncomment below to test the property
            //modelInstance.ingredientsTags shouldBe ("TODO")
        }

        // to test the property `ingredientsLc` - Language that was used to parse the ingredient list. If `ingredients_text` is available for the product main language (`lang`), `ingredients_lc=lang`, otherwise we look at `ingredients_text` fields for other languages and set `ingredients_lc` to the first non-empty `ingredient_text`.  
        should("test ingredientsLc") {
            // uncomment below to test the property
            //modelInstance.ingredientsLc shouldBe ("TODO")
        }

        // to test the property `ingredientsText` - Raw list of ingredients. This will get automatically parsed and get used to compute the Eco-Score or find allergens, etc..  It's a copy of ingredients_text in the main language of the product (see `lang` proprety). 
        should("test ingredientsText") {
            // uncomment below to test the property
            //modelInstance.ingredientsText shouldBe ("TODO")
        }

        // to test the property `ingredientsTextWithAllergens` - Same text as `ingredients_text` but where allergens have HTML elements around them to identify them 
        should("test ingredientsTextWithAllergens") {
            // uncomment below to test the property
            //modelInstance.ingredientsTextWithAllergens shouldBe ("TODO")
        }

        // to test the property `ingredientsThatMayBeFromPalmOilN`
        should("test ingredientsThatMayBeFromPalmOilN") {
            // uncomment below to test the property
            //modelInstance.ingredientsThatMayBeFromPalmOilN shouldBe ("TODO")
        }

        // to test the property `ingredientsThatMayBeFromPalmOilTags`
        should("test ingredientsThatMayBeFromPalmOilTags") {
            // uncomment below to test the property
            //modelInstance.ingredientsThatMayBeFromPalmOilTags shouldBe ("TODO")
        }

        // to test the property `ingredientsWithSpecifiedPercentN`
        should("test ingredientsWithSpecifiedPercentN") {
            // uncomment below to test the property
            //modelInstance.ingredientsWithSpecifiedPercentN shouldBe ("TODO")
        }

        // to test the property `ingredientsWithSpecifiedPercentSum`
        should("test ingredientsWithSpecifiedPercentSum") {
            // uncomment below to test the property
            //modelInstance.ingredientsWithSpecifiedPercentSum shouldBe ("TODO")
        }

        // to test the property `ingredientsWithUnspecifiedPercentN`
        should("test ingredientsWithUnspecifiedPercentN") {
            // uncomment below to test the property
            //modelInstance.ingredientsWithUnspecifiedPercentN shouldBe ("TODO")
        }

        // to test the property `ingredientsWithUnspecifiedPercentSum`
        should("test ingredientsWithUnspecifiedPercentSum") {
            // uncomment below to test the property
            //modelInstance.ingredientsWithUnspecifiedPercentSum shouldBe ("TODO")
        }

        // to test the property `knownIngredientsN`
        should("test knownIngredientsN") {
            // uncomment below to test the property
            //modelInstance.knownIngredientsN shouldBe ("TODO")
        }

        // to test the property `origins` - Origins of ingredients 
        should("test origins") {
            // uncomment below to test the property
            //modelInstance.origins shouldBe ("TODO")
        }

        // to test the property `originsHierarchy`
        should("test originsHierarchy") {
            // uncomment below to test the property
            //modelInstance.originsHierarchy shouldBe ("TODO")
        }

        // to test the property `originsLc`
        should("test originsLc") {
            // uncomment below to test the property
            //modelInstance.originsLc shouldBe ("TODO")
        }

        // to test the property `originsTags`
        should("test originsTags") {
            // uncomment below to test the property
            //modelInstance.originsTags shouldBe ("TODO")
        }

        // to test the property `traces` - List of substances that might cause allergies that are present in trace amounts in the product (this does not include the ingredients, as they are not only present in trace amounts). It is taxonomized with the allergens taxonomy. 
        should("test traces") {
            // uncomment below to test the property
            //modelInstance.traces shouldBe ("TODO")
        }

        // to test the property `tracesHierarchy`
        should("test tracesHierarchy") {
            // uncomment below to test the property
            //modelInstance.tracesHierarchy shouldBe ("TODO")
        }

        // to test the property `tracesLc`
        should("test tracesLc") {
            // uncomment below to test the property
            //modelInstance.tracesLc shouldBe ("TODO")
        }

        // to test the property `tracesTags`
        should("test tracesTags") {
            // uncomment below to test the property
            //modelInstance.tracesTags shouldBe ("TODO")
        }

        // to test the property `unknownIngredientsN`
        should("test unknownIngredientsN") {
            // uncomment below to test the property
            //modelInstance.unknownIngredientsN shouldBe ("TODO")
        }

        // to test the property `noNutritionData` - When a product does not have nutrition data displayed on the packaging, the user can check the field \"Nutrition facts are not specified on the product\". By doing so, the no_nutrition_data field takes the value \"on\". This case is frequent (thousands of products). 
        should("test noNutritionData") {
            // uncomment below to test the property
            //modelInstance.noNutritionData shouldBe ("TODO")
        }

        // to test the property `nutritionDataPer` - The nutrition data on the package can be per serving or per 100g.  This is essential to understand if `<nutrient>_value` and `<nutrient>` values in `nutriments` applies for a serving or for 100g.  **IMPORTANT:** When writing products, this setting applies to all existing nutrients values for the product, not only the nutrient values sent in the write request. So it should not be changed unless all nutrients values are provided with values that match the nutrition_data_per field. 
        should("test nutritionDataPer") {
            // uncomment below to test the property
            //modelInstance.nutritionDataPer shouldBe ("TODO")
        }

        // to test the property `nutritionDataPreparedPer` - The nutrition data for prepared product on the package (if any) can be per serving or per 100g.  This is essential to understand if `<nutrient>_prepared_value` and `<nutrient>_prepared` values in `nutriments` applies for a serving or for 100g.  See also important note on `nutrition_data_per`. 
        should("test nutritionDataPreparedPer") {
            // uncomment below to test the property
            //modelInstance.nutritionDataPreparedPer shouldBe ("TODO")
        }

        // to test the property `nutriments`
        should("test nutriments") {
            // uncomment below to test the property
            //modelInstance.nutriments shouldBe ("TODO")
        }

        // to test the property `nutriscoreData`
        should("test nutriscoreData") {
            // uncomment below to test the property
            //modelInstance.nutriscoreData shouldBe ("TODO")
        }

        // to test the property `nutriscoreGrade` - Nutri-Score for the product as a letter.  See https://world.openfoodfacts.org/nutriscore. 
        should("test nutriscoreGrade") {
            // uncomment below to test the property
            //modelInstance.nutriscoreGrade shouldBe ("TODO")
        }

        // to test the property `nutriscoreScore` - Nutri-Score for the product as an integer (see also `nutriscore_grade`). 
        should("test nutriscoreScore") {
            // uncomment below to test the property
            //modelInstance.nutriscoreScore shouldBe ("TODO")
        }

        // to test the property `nutriscoreScoreOpposite`
        should("test nutriscoreScoreOpposite") {
            // uncomment below to test the property
            //modelInstance.nutriscoreScoreOpposite shouldBe ("TODO")
        }

        // to test the property `nutritionGradeFr` - Nutrition grade (‘a’ to ‘e’), https://world.openfoodfacts.org/nutriscore. 
        should("test nutritionGradeFr") {
            // uncomment below to test the property
            //modelInstance.nutritionGradeFr shouldBe ("TODO")
        }

        // to test the property `nutritionGrades` - Nutrition grades as a comma separated list.  Some products with multiple components might have multiple Nutri-Score 
        should("test nutritionGrades") {
            // uncomment below to test the property
            //modelInstance.nutritionGrades shouldBe ("TODO")
        }

        // to test the property `nutritionGradesTags`
        should("test nutritionGradesTags") {
            // uncomment below to test the property
            //modelInstance.nutritionGradesTags shouldBe ("TODO")
        }

        // to test the property `nutritionScoreBeverage`
        should("test nutritionScoreBeverage") {
            // uncomment below to test the property
            //modelInstance.nutritionScoreBeverage shouldBe ("TODO")
        }

        // to test the property `nutritionScoreWarningFruitsVegetablesNutsEstimateFromIngredients`
        should("test nutritionScoreWarningFruitsVegetablesNutsEstimateFromIngredients") {
            // uncomment below to test the property
            //modelInstance.nutritionScoreWarningFruitsVegetablesNutsEstimateFromIngredients shouldBe ("TODO")
        }

        // to test the property `nutritionScoreWarningFruitsVegetablesNutsEstimateFromIngredientsValue`
        should("test nutritionScoreWarningFruitsVegetablesNutsEstimateFromIngredientsValue") {
            // uncomment below to test the property
            //modelInstance.nutritionScoreWarningFruitsVegetablesNutsEstimateFromIngredientsValue shouldBe ("TODO")
        }

        // to test the property `nutritionScoreWarningNoFiber`
        should("test nutritionScoreWarningNoFiber") {
            // uncomment below to test the property
            //modelInstance.nutritionScoreWarningNoFiber shouldBe ("TODO")
        }

        // to test the property `otherNutritionalSubstancesTags`
        should("test otherNutritionalSubstancesTags") {
            // uncomment below to test the property
            //modelInstance.otherNutritionalSubstancesTags shouldBe ("TODO")
        }

        // to test the property `unknownNutrientsTags`
        should("test unknownNutrientsTags") {
            // uncomment below to test the property
            //modelInstance.unknownNutrientsTags shouldBe ("TODO")
        }

        // to test the property `vitaminsTags`
        should("test vitaminsTags") {
            // uncomment below to test the property
            //modelInstance.vitaminsTags shouldBe ("TODO")
        }

        // to test the property `dataQualityBugsTags`
        should("test dataQualityBugsTags") {
            // uncomment below to test the property
            //modelInstance.dataQualityBugsTags shouldBe ("TODO")
        }

        // to test the property `dataQualityErrorsTags`
        should("test dataQualityErrorsTags") {
            // uncomment below to test the property
            //modelInstance.dataQualityErrorsTags shouldBe ("TODO")
        }

        // to test the property `dataQualityInfoTags`
        should("test dataQualityInfoTags") {
            // uncomment below to test the property
            //modelInstance.dataQualityInfoTags shouldBe ("TODO")
        }

        // to test the property `dataQualityTags`
        should("test dataQualityTags") {
            // uncomment below to test the property
            //modelInstance.dataQualityTags shouldBe ("TODO")
        }

        // to test the property `dataQualityWarningsTags`
        should("test dataQualityWarningsTags") {
            // uncomment below to test the property
            //modelInstance.dataQualityWarningsTags shouldBe ("TODO")
        }

        // to test the property `dataSources` - Source of data imported from producers. 
        should("test dataSources") {
            // uncomment below to test the property
            //modelInstance.dataSources shouldBe ("TODO")
        }

        // to test the property `dataSourcesTags`
        should("test dataSourcesTags") {
            // uncomment below to test the property
            //modelInstance.dataSourcesTags shouldBe ("TODO")
        }

        // to test the property `lastCheckDatesTags`
        should("test lastCheckDatesTags") {
            // uncomment below to test the property
            //modelInstance.lastCheckDatesTags shouldBe ("TODO")
        }

        // to test the property `lastCheckedT`
        should("test lastCheckedT") {
            // uncomment below to test the property
            //modelInstance.lastCheckedT shouldBe ("TODO")
        }

        // to test the property `lastChecker`
        should("test lastChecker") {
            // uncomment below to test the property
            //modelInstance.lastChecker shouldBe ("TODO")
        }

        // to test the property `states` - comma separated list of values indicating some states of the product, like things to be done, or to be completed. See [states taxonomy](https://static.openfoodfacts.net/data/taxonomies/states.json) 
        should("test states") {
            // uncomment below to test the property
            //modelInstance.states shouldBe ("TODO")
        }

        // to test the property `statesHierarchy`
        should("test statesHierarchy") {
            // uncomment below to test the property
            //modelInstance.statesHierarchy shouldBe ("TODO")
        }

        // to test the property `statesTags`
        should("test statesTags") {
            // uncomment below to test the property
            //modelInstance.statesTags shouldBe ("TODO")
        }

        // to test the property `miscTags` - Information about different aspect of the product 
        should("test miscTags") {
            // uncomment below to test the property
            //modelInstance.miscTags shouldBe ("TODO")
        }

        // to test the property `additivesOriginalTags`
        should("test additivesOriginalTags") {
            // uncomment below to test the property
            //modelInstance.additivesOriginalTags shouldBe ("TODO")
        }

        // to test the property `additivesPrevOriginalTags`
        should("test additivesPrevOriginalTags") {
            // uncomment below to test the property
            //modelInstance.additivesPrevOriginalTags shouldBe ("TODO")
        }

        // to test the property `addedCountriesTags`
        should("test addedCountriesTags") {
            // uncomment below to test the property
            //modelInstance.addedCountriesTags shouldBe ("TODO")
        }

        // to test the property `allergensFromIngredients`
        should("test allergensFromIngredients") {
            // uncomment below to test the property
            //modelInstance.allergensFromIngredients shouldBe ("TODO")
        }

        // to test the property `allergensFromUser`
        should("test allergensFromUser") {
            // uncomment below to test the property
            //modelInstance.allergensFromUser shouldBe ("TODO")
        }

        // to test the property `aminoAcidsPrevTags`
        should("test aminoAcidsPrevTags") {
            // uncomment below to test the property
            //modelInstance.aminoAcidsPrevTags shouldBe ("TODO")
        }

        // to test the property `aminoAcidsTags`
        should("test aminoAcidsTags") {
            // uncomment below to test the property
            //modelInstance.aminoAcidsTags shouldBe ("TODO")
        }

        // to test the property `carbonFootprintPercentOfKnownIngredients`
        should("test carbonFootprintPercentOfKnownIngredients") {
            // uncomment below to test the property
            //modelInstance.carbonFootprintPercentOfKnownIngredients shouldBe ("TODO")
        }

        // to test the property `categoriesProperties`
        should("test categoriesProperties") {
            // uncomment below to test the property
            //modelInstance.categoriesProperties shouldBe ("TODO")
        }

        // to test the property `categoriesPropertiesTags`
        should("test categoriesPropertiesTags") {
            // uncomment below to test the property
            //modelInstance.categoriesPropertiesTags shouldBe ("TODO")
        }

        // to test the property `categoryProperties`
        should("test categoryProperties") {
            // uncomment below to test the property
            //modelInstance.categoryProperties shouldBe ("TODO")
        }

        // to test the property `ciqualFoodNameTags`
        should("test ciqualFoodNameTags") {
            // uncomment below to test the property
            //modelInstance.ciqualFoodNameTags shouldBe ("TODO")
        }

        // to test the property `comparedToCategory` - the category to use for comparison.  **TODO** explain how it is chosen. 
        should("test comparedToCategory") {
            // uncomment below to test the property
            //modelInstance.comparedToCategory shouldBe ("TODO")
        }

        // to test the property `conservationConditions`
        should("test conservationConditions") {
            // uncomment below to test the property
            //modelInstance.conservationConditions shouldBe ("TODO")
        }

        // to test the property `customerService` - Contact info of customer service. 
        should("test customerService") {
            // uncomment below to test the property
            //modelInstance.customerService shouldBe ("TODO")
        }

        // to test the property `expirationDate`
        should("test expirationDate") {
            // uncomment below to test the property
            //modelInstance.expirationDate shouldBe ("TODO")
        }

        // to test the property `link` - link to the product on the website of the producer 
        should("test link") {
            // uncomment below to test the property
            //modelInstance.link shouldBe ("TODO")
        }

        // to test the property `mainCountriesTags`
        should("test mainCountriesTags") {
            // uncomment below to test the property
            //modelInstance.mainCountriesTags shouldBe ("TODO")
        }

        // to test the property `mineralsPrevTags`
        should("test mineralsPrevTags") {
            // uncomment below to test the property
            //modelInstance.mineralsPrevTags shouldBe ("TODO")
        }

        // to test the property `mineralsTags`
        should("test mineralsTags") {
            // uncomment below to test the property
            //modelInstance.mineralsTags shouldBe ("TODO")
        }

        // to test the property `ownerFields`
        should("test ownerFields") {
            // uncomment below to test the property
            //modelInstance.ownerFields shouldBe ("TODO")
        }

        // to test the property `novaGroupsMarkers`
        should("test novaGroupsMarkers") {
            // uncomment below to test the property
            //modelInstance.novaGroupsMarkers shouldBe ("TODO")
        }

        // to test the property `nucleotidesTags`
        should("test nucleotidesTags") {
            // uncomment below to test the property
            //modelInstance.nucleotidesTags shouldBe ("TODO")
        }

        // to test the property `origin`
        should("test origin") {
            // uncomment below to test the property
            //modelInstance.origin shouldBe ("TODO")
        }

        // to test the property `purchasePlaces` - Country, state, or city where the product can be purchased. 
        should("test purchasePlaces") {
            // uncomment below to test the property
            //modelInstance.purchasePlaces shouldBe ("TODO")
        }

        // to test the property `purchasePlacesTags`
        should("test purchasePlacesTags") {
            // uncomment below to test the property
            //modelInstance.purchasePlacesTags shouldBe ("TODO")
        }

        // to test the property `stores` - Distributor name. 
        should("test stores") {
            // uncomment below to test the property
            //modelInstance.stores shouldBe ("TODO")
        }

        // to test the property `storesTags`
        should("test storesTags") {
            // uncomment below to test the property
            //modelInstance.storesTags shouldBe ("TODO")
        }

        // to test the property `tracesFromIngredients`
        should("test tracesFromIngredients") {
            // uncomment below to test the property
            //modelInstance.tracesFromIngredients shouldBe ("TODO")
        }

        // to test the property `tracesFromUser`
        should("test tracesFromUser") {
            // uncomment below to test the property
            //modelInstance.tracesFromUser shouldBe ("TODO")
        }

        // to test the property `createdT` - Date when the product was added (UNIX timestamp format). See also `entry_dates_tags` 
        should("test createdT") {
            // uncomment below to test the property
            //modelInstance.createdT shouldBe ("TODO")
        }

        // to test the property `creator` - The contributor who added the product first. 
        should("test creator") {
            // uncomment below to test the property
            //modelInstance.creator shouldBe ("TODO")
        }

        // to test the property `editorsTags` - List of editors who edited the product. 
        should("test editorsTags") {
            // uncomment below to test the property
            //modelInstance.editorsTags shouldBe ("TODO")
        }

        // to test the property `informersTags`
        should("test informersTags") {
            // uncomment below to test the property
            //modelInstance.informersTags shouldBe ("TODO")
        }

        // to test the property `interfaceVersionCreated`
        should("test interfaceVersionCreated") {
            // uncomment below to test the property
            //modelInstance.interfaceVersionCreated shouldBe ("TODO")
        }

        // to test the property `interfaceVersionModified`
        should("test interfaceVersionModified") {
            // uncomment below to test the property
            //modelInstance.interfaceVersionModified shouldBe ("TODO")
        }

        // to test the property `languages`
        should("test languages") {
            // uncomment below to test the property
            //modelInstance.languages shouldBe ("TODO")
        }

        // to test the property `languagesCodes` - Same as `languages` but by language code, instead of language tags 
        should("test languagesCodes") {
            // uncomment below to test the property
            //modelInstance.languagesCodes shouldBe ("TODO")
        }

        // to test the property `languagesHierarchy`
        should("test languagesHierarchy") {
            // uncomment below to test the property
            //modelInstance.languagesHierarchy shouldBe ("TODO")
        }

        // to test the property `languagesTags`
        should("test languagesTags") {
            // uncomment below to test the property
            //modelInstance.languagesTags shouldBe ("TODO")
        }

        // to test the property `lastEditDatesTags`
        should("test lastEditDatesTags") {
            // uncomment below to test the property
            //modelInstance.lastEditDatesTags shouldBe ("TODO")
        }

        // to test the property `lastEditor`
        should("test lastEditor") {
            // uncomment below to test the property
            //modelInstance.lastEditor shouldBe ("TODO")
        }

        // to test the property `lastModifiedBy` - The username of the user who last modified the product. 
        should("test lastModifiedBy") {
            // uncomment below to test the property
            //modelInstance.lastModifiedBy shouldBe ("TODO")
        }

        // to test the property `lastModifiedT` - Date when the product page was last modified. 
        should("test lastModifiedT") {
            // uncomment below to test the property
            //modelInstance.lastModifiedT shouldBe ("TODO")
        }

        // to test the property `owner` - Id of the producer in case he provides his own data about a product (producer platform). 
        should("test owner") {
            // uncomment below to test the property
            //modelInstance.owner shouldBe ("TODO")
        }

        // to test the property `ownersTags` - Tagyfied version of owner 
        should("test ownersTags") {
            // uncomment below to test the property
            //modelInstance.ownersTags shouldBe ("TODO")
        }

        // to test the property `photographersTags`
        should("test photographersTags") {
            // uncomment below to test the property
            //modelInstance.photographersTags shouldBe ("TODO")
        }

        // to test the property `rev` - revision number of this product version (each edit adds a revision)
        should("test rev") {
            // uncomment below to test the property
            //modelInstance.rev shouldBe ("TODO")
        }

        // to test the property `sources`
        should("test sources") {
            // uncomment below to test the property
            //modelInstance.sources shouldBe ("TODO")
        }

        // to test the property `sourcesFields`
        should("test sourcesFields") {
            // uncomment below to test the property
            //modelInstance.sourcesFields shouldBe ("TODO")
        }

        // to test the property `teams`
        should("test teams") {
            // uncomment below to test the property
            //modelInstance.teams shouldBe ("TODO")
        }

        // to test the property `teamsTags`
        should("test teamsTags") {
            // uncomment below to test the property
            //modelInstance.teamsTags shouldBe ("TODO")
        }

        // to test the property `updateKey`
        should("test updateKey") {
            // uncomment below to test the property
            //modelInstance.updateKey shouldBe ("TODO")
        }

        // to test the property `knowledgePanels`
        should("test knowledgePanels") {
            // uncomment below to test the property
            //modelInstance.knowledgePanels shouldBe ("TODO")
        }

        // to test the property `attributeGroups` - Each element is an attribute that can help compute a personal ranking for the product
        should("test attributeGroups") {
            // uncomment below to test the property
            //modelInstance.attributeGroups shouldBe ("TODO")
        }

    }
}
