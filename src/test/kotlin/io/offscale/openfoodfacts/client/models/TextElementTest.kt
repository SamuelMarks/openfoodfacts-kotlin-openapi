/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.offscale.openfoodfacts.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import io.offscale.openfoodfacts.client.models.TextElement

class TextElementTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of TextElement
        //val modelInstance = TextElement()

        // to test the property `type` - the type of text, might influence the way you display it. 
        should("test type") {
            // uncomment below to test the property
            //modelInstance.type shouldBe ("TODO")
        }

        // to test the property `html` - Text to display in HTML format.
        should("test html") {
            // uncomment below to test the property
            //modelInstance.html shouldBe ("TODO")
        }

        // to test the property `language` - Language of the text. The name of the language is returned in the language requested when making the API call. e.g. if the text is in Polish, and the requested language is French, the language field will contain \"Polonais\" (French for \"Polish\"). Only set for specific fields such as the list of ingredients of a product.
        should("test language") {
            // uncomment below to test the property
            //modelInstance.language shouldBe ("TODO")
        }

        // to test the property `lc` - 2 letter language code for the text. Only set for specific fields such as the list of ingredients of a product.
        should("test lc") {
            // uncomment below to test the property
            //modelInstance.lc shouldBe ("TODO")
        }

        // to test the property `editFieldId` - id of the field used to edit this text in the product edit API.
        should("test editFieldId") {
            // uncomment below to test the property
            //modelInstance.editFieldId shouldBe ("TODO")
        }

        // to test the property `editFieldType` - Type of the product field.
        should("test editFieldType") {
            // uncomment below to test the property
            //modelInstance.editFieldType shouldBe ("TODO")
        }

        // to test the property `editFieldValue` - Current value of the product field. This may differ from the html field which can contain extra formating.
        should("test editFieldValue") {
            // uncomment below to test the property
            //modelInstance.editFieldValue shouldBe ("TODO")
        }

        // to test the property `sourceUrl` - Link to the source
        should("test sourceUrl") {
            // uncomment below to test the property
            //modelInstance.sourceUrl shouldBe ("TODO")
        }

        // to test the property `sourceText` - name of the source
        should("test sourceText") {
            // uncomment below to test the property
            //modelInstance.sourceText shouldBe ("TODO")
        }

        // to test the property `sourceLc` - Source locale name
        should("test sourceLc") {
            // uncomment below to test the property
            //modelInstance.sourceLc shouldBe ("TODO")
        }

        // to test the property `sourceLanguage` - Human readable source locale name
        should("test sourceLanguage") {
            // uncomment below to test the property
            //modelInstance.sourceLanguage shouldBe ("TODO")
        }

    }
}
