/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.offscale.openfoodfacts.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import io.offscale.openfoodfacts.client.models.GetProductByBarcode200ResponseAllOfAllOfAttributeGroupsInner

class GetProductByBarcode200ResponseAllOfAllOfAttributeGroupsInnerTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of GetProductByBarcode200ResponseAllOfAllOfAttributeGroupsInner
        //val modelInstance = GetProductByBarcode200ResponseAllOfAllOfAttributeGroupsInner()

        // to test the property `id` - Unique id of the attribute.  It will be use to match against preferences parameters. 
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `status` - wether we have the information to really compute this criteria or not.
        should("test status") {
            // uncomment below to test the property
            //modelInstance.status shouldBe ("TODO")
        }

        // to test the property `title` - A descriptive sentence about the situation of the product concerning attribute 
        should("test title") {
            // uncomment below to test the property
            //modelInstance.title shouldBe ("TODO")
        }

        // to test the property `match` - a numeric value for the match, telling how much the products ranks well for this particular attribute. The higher the value, the better the match. 
        should("test match") {
            // uncomment below to test the property
            //modelInstance.match shouldBe ("TODO")
        }

        // to test the property `grade` - every attribute as a grade for a to e
        should("test grade") {
            // uncomment below to test the property
            //modelInstance.grade shouldBe ("TODO")
        }

        // to test the property `name` - The name of attribute, for eventual display
        should("test name") {
            // uncomment below to test the property
            //modelInstance.name shouldBe ("TODO")
        }

        // to test the property `iconUrl` - an icon representing the attribute match (often using a color)
        should("test iconUrl") {
            // uncomment below to test the property
            //modelInstance.iconUrl shouldBe ("TODO")
        }

        // to test the property `description` - An eventual description of the value of the property upon which this attribute is based
        should("test description") {
            // uncomment below to test the property
            //modelInstance.description shouldBe ("TODO")
        }

        // to test the property `descriptionShort` - An eventual short description of the value of the property upon which this attribute is based
        should("test descriptionShort") {
            // uncomment below to test the property
            //modelInstance.descriptionShort shouldBe ("TODO")
        }

    }
}
