/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.offscale.openfoodfacts.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import io.offscale.openfoodfacts.client.models.GetProductByBarcode200ResponseAllOfAllOfNutriments

class GetProductByBarcode200ResponseAllOfAllOfNutrimentsTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of GetProductByBarcode200ResponseAllOfAllOfNutriments
        //val modelInstance = GetProductByBarcode200ResponseAllOfAllOfNutriments()

        // to test the property `alcohol` - Quantity of alcohol  (per 100g or per serving) in a standard unit (g or ml) 
        should("test alcohol") {
            // uncomment below to test the property
            //modelInstance.alcohol shouldBe ("TODO")
        }

        // to test the property `carbohydrates`
        should("test carbohydrates") {
            // uncomment below to test the property
            //modelInstance.carbohydrates shouldBe ("TODO")
        }

        // to test the property `energy` - It is the same as `energy-kj` if we have it, or computed from `energy-kcal` otherwise  (per 100g or per serving) in kj 
        should("test energy") {
            // uncomment below to test the property
            //modelInstance.energy shouldBe ("TODO")
        }

        // to test the property `energyValue` - energy_value will be equal to energy-kj_value if we have it or to energy-kcal_value otherwise 
        should("test energyValue") {
            // uncomment below to test the property
            //modelInstance.energyValue shouldBe ("TODO")
        }

        // to test the property `energyUnit` - Equal to energy-kj_unit if we have it or to energy-kcal_unit otherwise 
        should("test energyUnit") {
            // uncomment below to test the property
            //modelInstance.energyUnit shouldBe ("TODO")
        }

        // to test the property `energyKcal` - energy in kcal, if it is specified  (per 100g or per serving) in a standard unit (g or ml) 
        should("test energyKcal") {
            // uncomment below to test the property
            //modelInstance.energyKcal shouldBe ("TODO")
        }

        // to test the property `energyKj` - energy in kj, if it is specified  (per 100g or per serving) in a standard unit (g or ml) 
        should("test energyKj") {
            // uncomment below to test the property
            //modelInstance.energyKj shouldBe ("TODO")
        }

        // to test the property `fat`
        should("test fat") {
            // uncomment below to test the property
            //modelInstance.fat shouldBe ("TODO")
        }

        // to test the property `fruitsVegetablesLegumesEstimateFromIngredients` - An estimate, from the ingredients list of the percentage of fruits, vegetable and legumes. This is an important information for Nutri-Score (2023 version) computation. 
        should("test fruitsVegetablesLegumesEstimateFromIngredients") {
            // uncomment below to test the property
            //modelInstance.fruitsVegetablesLegumesEstimateFromIngredients shouldBe ("TODO")
        }

        // to test the property `fruitsVegetablesNutsEstimateFromIngredients` - An estimate, from the ingredients list of the percentage of fruits, vegetable and nuts. This is an important information for Nutri-Score (2021 version) computation. 
        should("test fruitsVegetablesNutsEstimateFromIngredients") {
            // uncomment below to test the property
            //modelInstance.fruitsVegetablesNutsEstimateFromIngredients shouldBe ("TODO")
        }

        // to test the property `novaGroup`
        should("test novaGroup") {
            // uncomment below to test the property
            //modelInstance.novaGroup shouldBe ("TODO")
        }

        // to test the property `nutritionScoreFr`
        should("test nutritionScoreFr") {
            // uncomment below to test the property
            //modelInstance.nutritionScoreFr shouldBe ("TODO")
        }

        // to test the property `proteins`
        should("test proteins") {
            // uncomment below to test the property
            //modelInstance.proteins shouldBe ("TODO")
        }

        // to test the property `salt`
        should("test salt") {
            // uncomment below to test the property
            //modelInstance.salt shouldBe ("TODO")
        }

        // to test the property `saturatedFat`
        should("test saturatedFat") {
            // uncomment below to test the property
            //modelInstance.saturatedFat shouldBe ("TODO")
        }

        // to test the property `sodium`
        should("test sodium") {
            // uncomment below to test the property
            //modelInstance.sodium shouldBe ("TODO")
        }

        // to test the property `sugars`
        should("test sugars") {
            // uncomment below to test the property
            //modelInstance.sugars shouldBe ("TODO")
        }

        // to test the property `carbonFootprintFromKnownIngredientsProduct`
        should("test carbonFootprintFromKnownIngredientsProduct") {
            // uncomment below to test the property
            //modelInstance.carbonFootprintFromKnownIngredientsProduct shouldBe ("TODO")
        }

        // to test the property `carbonFootprintFromKnownIngredientsServing`
        should("test carbonFootprintFromKnownIngredientsServing") {
            // uncomment below to test the property
            //modelInstance.carbonFootprintFromKnownIngredientsServing shouldBe ("TODO")
        }

        // to test the property `erythritol` - erythritol is a polyol which is not providing any energy. As such, it needs not be taken into account when computing the energy of a product. Eryhtritol is now displayed on nutrition facts sheet of some products, mainly in the USA. This value is entered either by contributors, either by imports. 
        should("test erythritol") {
            // uncomment below to test the property
            //modelInstance.erythritol shouldBe ("TODO")
        }

    }
}
