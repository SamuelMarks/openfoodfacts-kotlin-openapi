/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.offscale.openfoodfacts.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import io.offscale.openfoodfacts.client.models.GetApiV3TaxonomySuggestionsTaxonomy200Response
import io.offscale.openfoodfacts.client.models.ResponseStatusResult
import io.offscale.openfoodfacts.client.models.WarningOrErrorMessage

class GetApiV3TaxonomySuggestionsTaxonomy200ResponseTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of GetApiV3TaxonomySuggestionsTaxonomy200Response
        //val modelInstance = GetApiV3TaxonomySuggestionsTaxonomy200Response()

        // to test the property `statusId` - Overall status of the request: whether it failed or succeeded, with or without warnings or errors.
        should("test statusId") {
            // uncomment below to test the property
            //modelInstance.statusId shouldBe ("TODO")
        }

        // to test the property `result`
        should("test result") {
            // uncomment below to test the property
            //modelInstance.result shouldBe ("TODO")
        }

        // to test the property `warnings` - List of warnings. Warnings are used to alert about something that may be wrong, but is not necessarily wrong (e.g. a nutrient value that is unexpectedly high).
        should("test warnings") {
            // uncomment below to test the property
            //modelInstance.warnings shouldBe ("TODO")
        }

        // to test the property `errors` - List of errors. Errors are used to alert about something that is definitely wrong (e.g. a nutrient value thaty is impossibly high).
        should("test errors") {
            // uncomment below to test the property
            //modelInstance.errors shouldBe ("TODO")
        }

        // to test the property `suggestions` - Array of sorted strings suggestions in the language requested in the \"lc\" field.
        should("test suggestions") {
            // uncomment below to test the property
            //modelInstance.suggestions shouldBe ("TODO")
        }

        // to test the property `matchedSynonyms` - Dictionary of strings associating canonical names (as seen in suggestions field) with the synonym that best matches the query. An entry is present for all suggestions, even when the synonym is the same with the canonical name.  This value is present only if get_synonyms parameter is present. 
        should("test matchedSynonyms") {
            // uncomment below to test the property
            //modelInstance.matchedSynonyms shouldBe ("TODO")
        }

    }
}
